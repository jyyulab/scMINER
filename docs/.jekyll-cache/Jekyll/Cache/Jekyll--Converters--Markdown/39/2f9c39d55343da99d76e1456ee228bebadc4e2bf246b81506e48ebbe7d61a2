I"VJ<h1 class="no_toc" id="advanced-analysis">Advanced analysis</h1>
<p>Here we demonstrate our advanced downstream analysis pipeline using PBMC (10x genmomics) scRNA-seq data after following driver estimation tutorial under <a href="./PBMC-12k.md">step by step user guide</a>.</p>

<h2 id="network-visualization">Network visualization</h2>
<p>scMINER incorporates a handful of network visualization/exploration function adapted from <a href="https://jyyulab.github.io/NetBID/">NetBID2</a>, a powerful tool for data-driven network-based bayesian Inference of drivers. scMINER also offered several wrappers of basic visualization functions in NetBID2 for better usability.</p>

<h3 id="load-networks">Load networks</h3>
<p>You can retrieve your network and store them in a network structure with function <code class="highlighter-rouge">NetBID2::get.SJAracne.network</code>.</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">net1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">NetBID2</span><span class="o">::</span><span class="n">get.SJAracne.network</span><span class="p">(</span><span class="s1">'SJARACNE/NaiveT_8469_8468_4421/tf/SJARACNE_NaiveT_8469_8468_4421/SJARACNE_out.final/consensus_network_ncol_.txt'</span><span class="p">)</span><span class="w">
</span><span class="n">net2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">NetBID2</span><span class="o">::</span><span class="n">get.SJAracne.network</span><span class="p">(</span><span class="s1">'SJARACNE/Tmem_8489_8488_2482/tf/SJARACNE_Tmem_8489_8488_2482/SJARACNE_out.final/consensus_network_ncol_.txt'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Or, if you followed our analysis pipeline under <a href="./PBMC-12k.md">step by step user guide</a>, you should be able to load 
your network files under <code class="highlighter-rouge">./networks</code> folder:</p>
<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s2">"./networks/NaiveT_TF.network"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="single-network-visualization">Single network visualization</h3>
<p>In scMINER, you can visualize your driver and its targets by function <code class="highlighter-rouge">draw.network</code>. It was adapted from function <code class="highlighter-rouge">draw.targetNet</code> and <code class="highlighter-rouge">draw.targetNet.TWO</code> from <code class="highlighter-rouge">NetBID2</code>. This function can help visualize a driver’s targets as well as the relationship(edge) between source and target genes, by taking Mutual information as edge weight, and spearman correlation as direction.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.network</span><span class="p">(</span><span class="n">net1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">net</span><span class="p">,</span><span class="n">src1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"LEF1"</span><span class="p">,</span><span class="w"> </span><span class="c1">#driver name</span><span class="w">
	</span><span class="n">ifSymbol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="c1">#if your source driver name is a Symbol </span><span class="w">
	</span><span class="n">ifWeighted</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="c1">#if plot edge with weight and direction</span><span class="w">
	</span><span class="n">pdf_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"LEF1.TF_in_NaiveT_network.pdf"</span><span class="p">,</span><span class="w">
	</span><span class="n">n_layer</span><span class="o">=</span><span class="m">4</span><span class="p">)</span><span class="w">

</span></code></pre></div></div>
<center><img src="./plots/LEF1.TF_in_NaiveT_network.png" alt="drawing" width="600" /></center>

<h3 id="subnetwork-structure-visualization-between-two-networks">Subnetwork structure visualization between two networks</h3>
<p>You can also use <code class="highlighter-rouge">draw.network</code> function to visualize two networks and their subnetwork structure. This could be used for:</p>
<ul>
  <li>Identify common targets from two top driver from the same network</li>
  <li>Identify network rewiring event of same driver in different cell type network.</li>
</ul>

<p>Here below is an example for later case:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.network</span><span class="p">(</span><span class="n">net1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">net1</span><span class="p">,</span><span class="n">net2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">net2</span><span class="p">,</span><span class="w">
		</span><span class="n">src1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"BATF"</span><span class="p">,</span><span class="n">src2</span><span class="o">=</span><span class="s2">"BATF"</span><span class="p">,</span><span class="w"> 
		</span><span class="n">source1_z</span><span class="o">=</span><span class="m">-3</span><span class="p">,</span><span class="w"> </span><span class="n">source2_z</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w">
		</span><span class="n">ifSymbol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="n">ifWeighted</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
		</span><span class="n">pdf_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"BATF.TF_in_2_network.pdf"</span><span class="p">,</span><span class="w">
		</span><span class="n">n_layer</span><span class="o">=</span><span class="m">4</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<center><img src="./plots/BATF.TF_in_2_network.png" alt="drawing" width="600" /></center>

<h2 id="biological-function-anlaysis-for-drivers">Biological function anlaysis for drivers</h2>

<h3 id="gene-set-overlap-with-targets-visualized-by-bubble-plot">Gene set overlap with targets visualized by bubble plot</h3>
<p>When picking candidate hidden drivers, it would be extremly helpful if we could identify the potential biological pathways this driver regulates. With SJARACNe infered network, we can assess as well as  visualizethe overlap between knowledge-based gene sets and driver’s targets via function <code class="highlighter-rouge">draw.bubblePlot</code>. This function returns a bubble plot indiating results from Fisher exact test.</p>

<p>Before using<code class="highlighter-rouge">draw.bubblePlot</code> function, you have to load genesets in your working environment by function <code class="highlighter-rouge">gs.preload()</code></p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gs.preload</span><span class="p">(</span><span class="n">use_spe</span><span class="o">=</span><span class="s1">'Homo sapiens'</span><span class="p">,</span><span class="n">update</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then you can use function <code class="highlighter-rouge">TopMasterRegulator</code> to pull out top hidden driver candidates from your Differential activity analysis results. Or write your own fucntions to hand pick candidate to visualize. Here we provide an example of using function <code class="highlighter-rouge">TopMasterRegulator</code>.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TF_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">TopMasterRegulator</span><span class="p">(</span><span class="n">DAG_result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DAG_result</span><span class="p">,</span><span class="w">
                              </span><span class="n">celltype</span><span class="o">=</span><span class="s2">"NaiveT"</span><span class="p">,</span><span class="w">
                              </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">degree_filter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="m">800</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>
<p>Next generate your ID to symbol conversion table, since all gene sets are curated at gene symbol level. Here in our data, we used ensembl_id as our default ID for network construction. In order to match your ID with gene symbols, you can use function:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tbl</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_IDtransfer2symbol2type</span><span class="p">(</span><span class="n">from_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ensembl_gene_id"</span><span class="p">,</span><span class="w">
		</span><span class="n">use_genes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">eset.12k</span><span class="p">),</span><span class="n">ignore_version</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Here we provide an example for ploting overlap between target list of top drivers in Naive T cells, and knowledge based gene sets from “Hallmark”,”KEGG” and “GO”.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">draw.bubblePlot</span><span class="p">(</span><span class="n">driver_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">TF_list</span><span class="p">,</span><span class="w">
                </span><span class="n">show_label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DAG_result</span><span class="p">[</span><span class="n">TF_list</span><span class="p">,</span><span class="s2">"geneSymbol"</span><span class="p">],</span><span class="w">
                </span><span class="n">Z_val</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DAG_result</span><span class="p">[</span><span class="n">TF_list</span><span class="p">,</span><span class="s2">"Z_NaiveT"</span><span class="p">],</span><span class="w">
                </span><span class="n">driver_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w">
                </span><span class="n">target_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">net1</span><span class="o">$</span><span class="n">target_list</span><span class="p">,</span><span class="w">
                </span><span class="n">transfer2symbol2type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tbl</span><span class="p">,</span><span class="w">
                </span><span class="n">bg_list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fData</span><span class="p">(</span><span class="n">eset.12k</span><span class="p">)</span><span class="o">$</span><span class="n">geneSymbol</span><span class="p">,</span><span class="w">
                </span><span class="n">min_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">max_gs_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">600</span><span class="p">,</span><span class="w"> 
                </span><span class="n">top_geneset_number</span><span class="o">=</span><span class="m">8</span><span class="p">,</span><span class="n">top_driver_number</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="n">use_gs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"H"</span><span class="p">,</span><span class="s2">"C5"</span><span class="p">,</span><span class="s2">"CP:KEGG"</span><span class="p">),</span><span class="w">
                </span><span class="n">pdf_file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'NaiveT_bubblePlot.pdf'</span><span class="p">,</span><span class="w">
                </span><span class="n">main</span><span class="w"> </span><span class="o">=</span><span class="s1">'Bubbleplot for top driver targets in NaiveT'</span><span class="p">)</span><span class="w">

</span></code></pre></div></div>
<center><img src="./plots/NaiveT_bubblePlot.png" alt="gsbbp" /></center>

<hr />

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Mojave 10.14.3

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
 [1] stats4    grid      parallel  stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] scMINER_0.1.0               NetBID2_2.0.1               openxlsx_4.1.0.1            msigdbr_7.0.1               GSVA_1.32.0                 biomaRt_2.40.4             
 [7] reshape_0.8.8               arm_1.10-1                  MASS_7.3-51.4               MCMCglmm_2.29               ape_5.3                     coda_0.19-3                
[13] ordinal_2019.4-25           umap_0.2.3.1                plotrix_3.7-6               plot3D_1.1.1                igraph_1.2.4.1              aricode_0.1.2              
[19] ConsensusClusterPlus_1.48.0 DESeq2_1.24.0               tximport_1.12.3             impute_1.58.0               limma_3.40.6                GEOquery_2.52.0            
[25] lme4_1.1-21                 SummarizedExperiment_1.14.1 DelayedArray_0.10.0         BiocParallel_1.18.1         matrixStats_0.55.0          GenomicRanges_1.36.1       
[31] GenomeInfoDb_1.20.0         IRanges_2.18.3              S4Vectors_0.22.1            kableExtra_1.1.0            knitr_1.25                  Matrix_1.2-17              
[37] rmarkdown_1.16              cowplot_1.0.0               dplyr_0.8.3                 pheatmap_1.0.12             ComplexHeatmap_2.0.0        scales_1.0.0               
[43] RColorBrewer_1.1-2          ggplot2_3.2.1               reshape2_1.4.3              Biobase_2.44.0              BiocGenerics_0.30.0         BiocManager_1.30.4         

loaded via a namespace (and not attached):
  [1] backports_1.1.4        circlize_0.4.8         Hmisc_4.2-0            plyr_1.8.4             lazyeval_0.2.2         GSEABase_1.46.0        splines_3.6.1          digest_0.6.21         
  [9] htmltools_0.3.6        magrittr_1.5           checkmate_1.9.4        memoise_1.1.0          cluster_2.1.0          readr_1.3.1            annotate_1.62.0        askpass_1.1           
 [17] prettyunits_1.0.2      colorspace_1.4-1       blob_1.2.0             rvest_0.3.4            xfun_0.10              jsonlite_1.6           crayon_1.3.4           RCurl_1.95-4.12       
 [25] graph_1.62.0           genefilter_1.66.0      zeallot_0.1.0          survival_2.44-1.1      glue_1.3.1             gtable_0.3.0           zlibbioc_1.30.0        XVector_0.24.0        
 [33] webshot_0.5.1          GetoptLong_0.1.7       Rhdf5lib_1.6.1         shape_1.4.4            abind_1.4-5            DBI_1.0.0              Rcpp_1.0.2             viridisLite_0.3.0     
 [41] xtable_1.8-4           progress_1.2.2         htmlTable_1.13.2       clue_0.3-57            reticulate_1.13        foreign_0.8-72         bit_1.1-14             Formula_1.2-3         
 [49] htmlwidgets_1.3        httr_1.4.1             acepack_1.4.1          pkgconfig_2.0.3        XML_3.98-1.20          nnet_7.3-12            locfit_1.5-9.1         tidyselect_0.2.5      
 [57] rlang_0.4.0            later_0.8.0            AnnotationDbi_1.46.1   munsell_0.5.0          tools_3.6.1            RSQLite_2.1.2          evaluate_0.14          stringr_1.4.0         
 [65] bit64_0.9-7            zip_2.0.4              purrr_0.3.2            nlme_3.1-141           mime_0.7               xml2_1.2.2             compiler_3.6.1         shinythemes_1.1.2     
 [73] rstudioapi_0.10        png_0.1-7              tibble_2.1.3           geneplotter_1.62.0     stringi_1.4.3          cubature_2.0.3         lattice_0.20-38        nloptr_1.2.1          
 [81] tensorA_0.36.1         vctrs_0.2.0            pillar_1.4.2           lifecycle_0.1.0        GlobalOptions_0.1.1    ucminf_1.1-4           data.table_1.12.2      bitops_1.0-6          
 [89] corpcor_1.6.9          httpuv_1.5.2           R6_2.4.0               latticeExtra_0.6-28    promises_1.0.1         gridExtra_2.3          boot_1.3-23            assertthat_0.2.1      
 [97] rhdf5_2.28.0           openssl_1.4.1          rjson_0.2.20           withr_2.1.2            GenomeInfoDbData_1.2.1 hms_0.5.1              rpart_4.1-15           tidyr_1.0.0           
[105] minqa_1.2.4            misc3d_0.8-4           numDeriv_2016.8-1.1    shiny_1.3.2            base64enc_0.1-3       
</code></pre></div></div>
<hr />

:ET
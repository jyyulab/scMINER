{
  "0": {
    "id": "0",
    "title": "Run clustering with MICA",
    "content": "Run clustering with MICA module MICA(Mutual Information based Clustering Analysis) is a nonlinear clustering analysis tool designed for scRNA-seq data. To install MIE (Mutual inforamtion estimator for distance matrix generation, module required for MICA) and MICA, please refer our MIE and MICA github page. Preprocssing Enviroment Setup for MIE and MICA Basic usage MICA Outputs Useful parameters Visualize with U-map or t-SNE Pick your optimal number of K Try other number of clusters using preclust function Try other dimension reduction methods Preprocssing Preprocessing is very simple for MICA analysis. You can use our home-made script in R or python, with code require(scMINER) d &lt;- pre.MICA (data.input = [your_data], #data matrix that have unique colnames and geneSymbol as rownames output_rmd = TRUE, #whether or not output Rmarkdown report, default as TRUE projectName = &quot;PBMC12K&quot;, plot.dir = &quot;.&quot;, # save plot at.. sampleID = &quot;Sample&quot;, # sample info (could be a string or a vector of original group info)) Enviroment Setup for MIE and MICA MIE and MICA were both designed primarily for runing in LSF, to set up your LSF environment, please enter following command on your LSF node: ssh hpc # ssh to a head node hpcf_interactive # login an interactive node setcbenv prod # set CompBio environment to prod cbload phoenix # load CompBio modules cbload util-python module load python/3.6.1 # load python for clustering module load R/3.4.0 # load R for visualization Basic usage Run MIE to calculate cell-cell distance matrix cd [your_mie_root_directory] ./MIE/mie.py Pipeline test_no_intall_LSF ./test_data/inputs/PBMC_Demo_MICA_input_mini.txt ./test_data/outputs/ test_no_intall_LSF --host LSF Run MICA after MIE is complete, --k defines the number of cluster to try for MICA pipeline cd [your_mica_root_directory] ./MICA/mica.py Clust PBMC_12k ./PBMC_12k/inputs/PBMC_12k.whole.h5 ./test_data/inputs/PBMC_12k_mi.h5 ./PBMC_12k/outputs/ PBMC_12k --k 7 8 9 10 --host LSF MICA Outputs Each assigned number of k will output one folder containing following files. [Project_name]_clust_k[number].rplot.pdf –visualization of clustering result (default as UMAP) [Project_name]_clust.h5 – h5 file containing all intermediate results (including dimention reduced expression matrix, etc.) [Project_name]_mds.pdf – pdf file of t-SNE visualization of mds transformed distance matrix, with perplexity set to 30 [Project_name].ggplot.txt – txt file containing visualization coordinates and clustering labels ├── test_no_install_LSF │   ├── MICA_test_no_install_LSF_MDS_3 │   │   ├── MICA_log │   │   ├── MICA_out │   │   │   ├── test_no_install_LSF.ggplot.txt │   │   │   ├── test_no_install_LSF_clust.h5 │   │   │   ├── test_no_install_LSF_clust_k3.rplot.pdf │   │   │   └── test_no_install_LSF_mds.pdf Useful parameters Visualize with U-map or t-SNE MICA incorporate UMAP as default clustering visualization, with min_dist parameter set to 0.25, this controls how points packed together. Low values of min_dist will result in clumpier embeddings. You can tune this parameter with : -- min_dist 0.1 (or other number ranging from 0-1) tSNE visualization is also integrated in the pipeline, if you want to use t-SNE, just set : --visualize tsne(all lower cap, no &quot;-&quot;) and you can also set parameter (perplexity) for tsne using --perplexity 20 (or any other integers larger than 5) Pick your optimal number of K Try other number of clusters using preclust function In order to bypass transformation part and do clustering directly, we incorporate --preclust function into our pipeline, following is the sample usage. --preclust [path_to: h5 file generated by scMINER in previous clustering (e.g. k=2)] Try other dimension reduction methods MICA also incorporated other dimension reduction methods such as pca or lpl, you can use them via adding parameter: --transformation PCA (or: MDS | PCA | LPL | LPCA)",
    "url": "http://localhost:4000/docs/MICA.html",
    "relUrl": "/docs/MICA.html"
  },
  "1": {
    "id": "1",
    "title": "PBMC(12k) scRNA-seq data",
    "content": "Analysis on PBMC(12k) scRNA-seq data via scMINER Here we demonstrate our pipeline using PBMC (10x genmomics) scRNA-seq data [link to data matrix]. Full data contains 68k cells(link to 10x website), in order to provide a quicker guidance, we’ve down sampled this data to 12k cells. Original data website can be downloaded here. Installation scRNA-seq data preprocessing Read 10x genomics data Down sampling Quality control Generate MICA input Run MICA clustering on HPCF Cluster-based network analysis Cell type analysis from MICA output Reading MICA output Marker gene highlighting Assign cell type to cluster Network generation via SJARACNe Find cell type specific master regulator Calculate Inferred activity Find Differential activity TF Installation scMINER is based on python and R, with a single R package glued all essential functions together. scRNA-seq data preprocessing This can be done by any scRNA-seq preprocessing pipeline. We encourage user to feed in all genes from your data for MICA, instead of highly variable genes only. Here, in order to stick to the focus, we only demonstrate a quick function to conduct gene/cell filtering, without any data exploratory visualization. Read 10x genomics data Read 10x genomics data wih function embeded in scMINER package. d &lt;- readscRNAseqData(file=&quot;PBMC68k_input/&quot;,is.10x = TRUE) Down sampling In order to provide a quicker guidance, we’ve down sampled this data to 12k cells. set.seed(1) d.12k&lt;-d[,sample(colnames(d),12000)] dim(d.12k) #[1] 32738 12000 Quality control d &lt;- pre.MICA (data.input=d.12k, #data matrix that have unique colnames and geneSymbol as rownames output_rmd = TRUE, #whether or not output Rmarkdown report, default as TRUE projectName = &quot;PBMC12K&quot;, gene_filter=TRUE, # do gene filtering cell_filter=TRUE, # do cell filtering cell_percentage=0.005, # gene filtering criteria ERCC_filter=TRUE, # by spike-in Mito_filter=TRUE, # by mitochondra genes UMI_filter=&quot;both&quot;, # by UMI count(three way filtering) plotting=TRUE, # If do visualization plot.dir=&quot;.&quot;, # save plot at.. norm=10e6, # normalize to .. sampleID=&quot;PBMC_12k&quot;, # sample info (could be a string or a vector of original group info) log2Transform=TRUE #if or not do log2 transformation ) If you set plotting = TRUE, then there will be two visualization plot generated for gene/cell quality control. One is the total number of cell expressed by each gene The other plot will visualize total UMI count, total number of gene expressed, mitochondria percentage, and spike-in percentage for each cell. Generate MICA input After reviewing all visualization and conduct filtering, you can go ahead and generate clustering(MICA) input, which will be a cell by gene txt file. If your data was not generated by 10x genomics, you can prepare your own filtering and use this step for clustering Input generation, please note that you should always feed MICA the log or log2 transformed data. generateMICAinput(data=d,filename=&quot;PBMC12k_MICA_input.txt&quot;) This will output a txt file containing filtered expression matrix for MICA. Run MICA clustering on HPCF MICA is implemented in Python now. If you would like to install MICA solely, please infer MICA github page.There are several parameters for you to choose when running MICA. Here we provided is an example of running MICA on high performance clusters. In shell terminal, for environmental set up: ssh hpc # ssh to a head node hpcf_interactive # login an interactive node setcbenv prod # set CompBio environment to prod cbload phoenix # load CompBio modules cbload util-python module load python/3.6.1 # load python for clustering module load R/3.4.0 # load R for visualization To run MICA: #First run MIE to calculate distance matrix ./MIE/mie.py Pipeline test_no_intall_LSF ./test_data/inputs/PBMC_Demo_MICA_input_mini.txt ./test_data/outputs/ test_no_intall_LSF --host LSF # run MIE #Then use MICA to do clustering analysis ./MICA/mica.py Clust PBMC_12k ./PBMC_12k/inputs/PBMC_12k.whole.h5 ./test_data/inputs/PBMC_12k_mi.h5 ./PBMC_12k/outputs/ PBMC_12k --k 7 8 9 10 --perplexity 30 --retransformation False --host LSF Default setting will give you one u-MAP visualization for each choice of k. Cluster-based network analysis MINIE analysis was wrapped up as a R package to help bridge unsupervised clustering and gene regulatory network analysis. Note: Detailed information about individual functions are documented in package manual. Cell type analysis from MICA output First, after clustering via MICA(see [MICA] (/docs/MICA.html), you can load MICA output (in .txt) as well as input expression matrix in R under an expressionSet. This is going to be the major data structure we used for MINIE analysis in R. Reading MICA output eset.demo &lt;- readMICAoutput( input_file=&quot;PBMC12k_MICA_input.txt&quot;, load_clust_label=TRUE, output_file=&quot;PBMC12k.ggplot.txt&quot;) Marker gene highlighting Picked marker genes could be visualized on t-SNE scatterplot, heatmap or violinplot. This will help pick up a reasonable number of cluster. gn.sel&lt;-c(&quot;CD3D&quot;,&quot;CD27&quot;,&quot;IL7R&quot;,&quot;SELL&quot;,&quot;CCR7&quot;,&quot;IL32&quot;,&quot;GZMA&quot;, &quot;GZMK&quot;,&quot;DUSP2&quot;,&quot;CD8A&quot;,&quot;GZMH&quot;,&quot;GZMB&quot;,&quot;CD79A&quot;,&quot;CD79B&quot;,&quot;CD86&quot;,&quot;CD14&quot;) gene_highlighting(input_eset=eset.demo, target = gn.sel, title.size = 8) gene_vlnplot(eset.demo,target=gn.sel,group_tag = &quot;label&quot;) gene_heatmap(eset = eset.demo,target = gn.sel,group_tag = &quot;label&quot;, save_plot = TRUE,width = 6,height = 6, name = &quot;log2_expression&quot;,plot_name=&quot;./GeneHeatmap.png&quot;) Assign cell type to cluster Here we curated a reference signature list of 8 immune cell types(link) for cell type annotation. In AssignCellTypes.hmp function, we calculated cell type scores for each clusters, and visualize scores using heatmap. ref&lt;-read.xlsx(&quot;Immune_signatures.xlsx&quot;) head(ref) &gt; head(ref) celltype markers weight 1 NaiveT SELL 1 2 NaiveT CCR7 1 3 Tmem IL7R 1 4 Tmem CD27 1 5 Tmem IL32 1 6 Tmem GZMA -1 hmp&lt;-AssignCellTypes.Hmp(ref=ref,eset=eset.demo,save_plot = TRUE) # Manually assign your cell type label celltype &lt;-c(&quot;NaiveT&quot;,&quot;Tmem&quot;,&quot;CD8em&quot;,&quot;CD8eff&quot;,&quot;NK&quot;,&quot;Bcell&quot;,&quot;DC&quot;,&quot;Mo&quot;) eset.demo$celltype &lt;- celltype[eset.demo$label] Network generation via SJARACNe In order to generate cell type/group/cluster specific network, group information should be stored under pData([your_expressionSet]). And R function generateSJAracneInput will help to partition your expression matrix and conduct a loose filtering of your scRNA-seq data(filter about 0 expressed genes in cluster). Besides, a reference TF list should be provided as tf.ref to guide hub gene selection. Each group will create one directory which contains filtered expression matrix in .exp format, as long as the filtered TF list in .txt. generateSJAracneInput(eset=eset.demo,tf.ref=tf.ref,wd.src=&quot;Sjaracne/&quot;, group_tag=&quot;celltype&quot;) Warning: SJARACNe has not been integrated into MINIE yet, please consult here for installation. indir=~/PBMC12K/SJARACNE_PBMC12K/ for i in $(ls -d */ | cut -f1 -d&#39;/&#39;);do sjaracne ${i} $indir/${i}/*.exp $indir/${i}/tf/*.txt $indir/${i}/tf/ --c_threshold 0.01; echo ${i} has been submitted!; done Find cell type specific master regulator Identify master regulator from content based network is the key step in MINIE to help understanding your scRNA-seq data. Calculate Inferred activity TF acitivities are calculated by integrating expression profile of their targets. Targets identified from SJARACNe of perticular TF was normalized and averaged to infer TF activity. acs.demo &lt;- GetActivityFromSJARANCE( SJaracne_output_path=&quot;Sjaracne/&quot;, SJaracne_input_eset=eset.demo, activity.method=&quot;unweighted&quot;, activity.norm=TRUE, group_tag = &quot;celltype&quot;, save_network_file=FALSE, save_path=NA) Find Differential activity TF The function FindDAG was designed for identify highly differentiated TF from SJARACNe inferred activity matrix. In order to do so, we did two sided student’s t-test to compare mean acitivty from one cell type V.S. the others. res &lt;- FindDAG(eset = acs.demo,group_tag = &quot;celltype&quot;) This function will output a full matrix that contians all TF occurred in original dataset, statistics such as t.statistics, p-value, 95%CI, etc. are outputed to help idenify master regulators. You can save it in txt or xlsx for checking. While you can also visualize top master regulator candidates in heatmap or violinplots. Only png as plotting device is supported. TF_list &lt;- TopMasterRegulator(DAG_result = res,n = 3, degree_filter = 50) gene_heatmap(eset = eset.demo,target = gn.sel,group_tag = &quot;label&quot;, width = 10,height = 6, save_plot=TRUE, name = &quot;Activity&quot;,plot_name=&quot;./TopTFHeatmap.png&quot;) ## R session info R version 3.5.0 (2018-04-23) Platform: x86_64-apple-darwin15.6.0 (64-bit) Running under: macOS High Sierra 10.13.6 Matrix products: default BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: [1] parallel stats graphics grDevices utils datasets methods base other attached packages: [1] bindrcpp_0.2.2 Biobase_2.42.0 BiocGenerics_0.28.0 dplyr_0.7.8 [5] RColorBrewer_1.1-2 ggplot2_3.1.0 reshape2_1.4.3 loaded via a namespace (and not attached): [1] Rcpp_1.0.0 rstudioapi_0.8 bindr_0.1.1 magrittr_1.5 tidyselect_0.2.5 [6] munsell_0.5.0 colorspace_1.3-2 R6_2.3.0 rlang_0.3.0.1 stringr_1.3.1 [11] plyr_1.8.4 tools_3.5.0 grid_3.5.0 gtable_0.2.0 withr_2.1.2 [16] digest_0.6.18 yaml_2.2.0 lazyeval_0.2.1 assertthat_0.2.0 tibble_1.4.2 [21] crayon_1.3.4 zip_1.0.0 purrr_0.2.5 glue_1.3.0 labeling_0.3 [26] openxlsx_4.1.0 stringi_1.2.4 compiler_3.5.0 pillar_1.3.1 scales_1.0.0 [31] pkgconfig_2.0.2",
    "url": "http://localhost:4000/docs/PBMC-12k.html",
    "relUrl": "/docs/PBMC-12k.html"
  },
  "2": {
    "id": "2",
    "title": "Markdown kitchen sink",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. Header 1 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. Header 2 This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, &quot;= #{version}&quot;) end Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 head1 head two three ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm There’s a horizontal rule below this. Here is an unordered list: Item foo Item bar Item baz Item zip And an ordered list: Item one Item two Item three Item four And a nested list: level 1 item level 2 item level 2 item level 3 item level 3 item level 1 item level 2 item level 2 item level 2 item level 1 item level 2 item level 2 item level 1 item And a task list Hello, this is a TODO item Hello, this is another TODO item Goodbye, this item is done Small image Large image Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element.",
    "url": "http://localhost:4000/docs/index-test.html",
    "relUrl": "/docs/index-test.html"
  },
  "3": {
    "id": "3",
    "title": "Welcome to scMINER",
    "content": "scMINER tutorial scMINER is a toolbox for single-cell analysis based on mutual information. This package is a combination of several individual tools including but not limit to MICA and MINIE. Separate installation of each individual tools is also available on github. Get started now View it on GitHub Getting started Dependencies scMINER is depend on python3 and R. Local installation: Install scMINER: #install dev_tool first install.packages(devtools) devtools::install_github(&quot;jyyulab/scMINER&quot;) About the project License Just the Docs is distributed by an MIT license. Contributing When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in our GitHub repo.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "4": {
    "id": "4",
    "title": "Quick start with scMINER (local version)",
    "content": "# Preprocessing Run MICA locally Optimal K Visualization Run SJARANCE locally Run MINIE analysis Preprocessing Run MICA locally Optimal K Visualization Run SJARANCE locally Run MINIE analysis",
    "url": "http://localhost:4000/docs/scMINER_local.html",
    "relUrl": "/docs/scMINER_local.html"
  }
  
}

{
  "0": {
    "id": "0",
    "title": "Run MICA locally",
    "content": "Clustering Analysis with MICA on local nodes MICA(Mutual Information based Clustering Analysis) is a nonlinear clustering analysis tool designed for scRNA-seq data. To install MIE (Mutual inforamtion estimator for distance matrix generation, module required for MICA) and MICA, please refer our MIE and MICA github page. Preprocssing Basic usage MICA Outputs Useful parameters Visualize with U-map or t-SNE Try other dimension reduction methods Try other distance matrix calculation methods Post-clustering analysis Preprocssing Preprocessing is fairly simple for MICA analysis. You can use our customized script in R, with function draw.scRNAseq.QC and preMICA.filtering in scMINER R package. For detailed information, please see complementary tutorial in tab Sample Analysis with PBMC(12k) scRNA-seq data. Basic usage MICA is implemented in python, in order to run MICA troublefree, you could use function generate_MICA_rmd in R package scMINER to generate essential command for running MICA locally: In R console: scMINER::generate_MICA_cmd(save_sh_at, #path to save shell script input_file, #your MICA input file project_name, num_cluster, #a vector of numerical number output_path, #path to MICA output host=&quot;local&quot;, visualization=&quot;tsne&quot; #or &quot;umap&quot;) or, you can edit create your own shell script to run MICA like below: #!/usr/bin/env bash mica local -i ./test_data/inputs/PBMC_Demo_MICA_input_mini.txt -p &quot;test_local&quot; -k 3 4 -o ./test_data/outputs/test_local/ MICA Outputs Each assigned number of k will output one folder containing following files. [Project_name]_k[number]_tsne.png –visualization of clustering result (default as tSNE) [Project_name]_dist.h5 – h5 file containing distance matrix calculated. [Project_name]_mds.pdf – pdf file of t-SNE visualization of mds transformed distance matrix, with perplexity set to 30 [Project_name]_tsne_ClusterMem.txt – txt file containing visualization coordinates and clustering labels Useful parameters Visualize with U-map or t-SNE MICA incorporate UMAP as optional clustering visualization, with min_dist parameter set to 0.25, this controls how points packed together. Low values of min_dist will result in clumpier embeddings. You can tune this parameter with : --min_dist 0.1 (or other number ranging from 0-1) tSNE visualization is our default visualization method in the pipeline, if you want to use t-SNE, just set : --visualization tsne (all lower cap, no &quot;-&quot;) and you can also set parameter (perplexity) for tsne using -pp 20 (or any other integers larger than 5) Try other dimension reduction methods MICA also incorporated other dimension reduction methods such as pca or lpl, you can use them via adding parameter: -dr PCA (or: MDS | PCA | LPL | LPCA) Try other distance matrix calculation methods MICA also incorporated other dimension reduction methods such as pca or lpl, you can use them via adding parameter: --dist MI (or: euclidean | spearman | pearson) Post-clustering analysis We offer a handful of useful functions in scMINER ranging from visualization to driver estimation to help you explore your scRNA-seq data in a system biology way after clustering.",
    "url": "http://localhost:4000/docs/MICA.html",
    "relUrl": "/docs/MICA.html"
  },
  "1": {
    "id": "1",
    "title": "Run MICA on LSF",
    "content": "Clustering Analysis with MICA on LSF MICA(Mutual Information based Clustering Analysis) is a nonlinear clustering analysis tool designed for scRNA-seq data. To install MIE (Mutual inforamtion estimator for distance matrix generation, module required for MICA) and MICA, please refer our MIE and MICA github page. Preprocssing Basic usage MICA Outputs Useful parameters Visualize with U-map or t-SNE Try other dimension reduction methods Try other distance matrix calculation methods Post-clustering analysis Preprocssing Preprocessing is fairly simple for MICA analysis. You can use our customized script in R, with function draw.scRNAseq.QC and preMICA.filtering in scMINER R package. For detailed information, please see complementary tutorial in tab Sample Analysis with PBMC(12k) scRNA-seq data. Basic usage MICA is implemented in python, in order to run MICA troublefree, you could use function generate_MICA_rmd in R package scMINER to generate essential command for running MICA on LSF via: scMINER::generateMICAcmd(save_sh_at, #path to save shell script input_file, #your MICA input file project_name, num_cluster, #a vector of numerical number output_path, host=&quot;lsf&quot;, #or local queue=NULL, #your queue to submit the job memory=NULL, #specify if you use LSF, a vector of 4 numerical number dim_reduction_method=&quot;MDS&quot;, visualization=&quot;tsne&quot;) or, you can edit create your own shell script to run MICA like below: #!/usr/bin/env bash mica LSF -i ./test_data/inputs/PBMC_Demo_MICA_input_mini.txt -p &quot;test_local&quot; -k 3 4 -o ./test_data/outputs/test_local/ MICA Outputs Each assigned number of k will output one folder containing following files. [Project_name]_k[number]_tsne.png –visualization of clustering result (default as tSNE) [Project_name]_dist.h5 – h5 file containing distance matrix calculated. [Project_name]_mds.pdf – pdf file of t-SNE visualization of mds transformed distance matrix, with perplexity set to 30 [Project_name]_tsne_ClusterMem.txt – txt file containing visualization coordinates and clustering labels Useful parameters Visualize with U-map or t-SNE MICA incorporate UMAP as optional clustering visualization, with min_dist parameter set to 0.25, this controls how points packed together. Low values of min_dist will result in clumpier embeddings. You can tune this parameter with : --min_dist 0.1 (or other number ranging from 0-1) tSNE visualization is our default visualization method in the pipeline, if you want to use t-SNE, just set : --visualization tsne (all lower cap, no &quot;-&quot;) and you can also set parameter (perplexity) for tsne using -pp 20 (or any other integers larger than 5) Try other dimension reduction methods MICA also incorporated other dimension reduction methods such as pca or lpl, you can use them via adding parameter: -dr PCA (or: MDS | PCA | LPL | LPCA) Try other distance matrix calculation methods MICA also incorporated other dimension reduction methods such as pca or lpl, you can use them via adding parameter: --dist MI (or: euclidean | spearman | pearson) Post-clustering analysis We offer a handful of useful functions in scMINER ranging from visualization to driver estimation to help you explore your scRNA-seq data in a system biology way after clustering.",
    "url": "http://localhost:4000/docs/MICA_LSF.html",
    "relUrl": "/docs/MICA_LSF.html"
  },
  "2": {
    "id": "2",
    "title": "Cell-type specific network analysis",
    "content": "Analysis on cell-type specific network Here we demonstrate our advanced downstream analysis pipeline using PBMC (10x genmomics) scRNA-seq data [link to data matrix]. Full data contains 68k cells(link to 10x website), in order to provide a quicker guidance, we’ve down sampled this data to 12k cells. This tutorial provide a guidance for study master regulators utilzing cell-type specific networks. Original data website can be downloaded here. ##Network visualization ### network/two network visualizaton ## R session info R version 3.5.0 (2018-04-23) Platform: x86_64-apple-darwin15.6.0 (64-bit) Running under: macOS High Sierra 10.13.6 Matrix products: default BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: [1] parallel stats graphics grDevices utils datasets methods base other attached packages: [1] bindrcpp_0.2.2 Biobase_2.42.0 BiocGenerics_0.28.0 dplyr_0.7.8 [5] RColorBrewer_1.1-2 ggplot2_3.1.0 reshape2_1.4.3 loaded via a namespace (and not attached): [1] Rcpp_1.0.0 rstudioapi_0.8 bindr_0.1.1 magrittr_1.5 tidyselect_0.2.5 [6] munsell_0.5.0 colorspace_1.3-2 R6_2.3.0 rlang_0.3.0.1 stringr_1.3.1 [11] plyr_1.8.4 tools_3.5.0 grid_3.5.0 gtable_0.2.0 withr_2.1.2 [16] digest_0.6.18 yaml_2.2.0 lazyeval_0.2.1 assertthat_0.2.0 tibble_1.4.2 [21] crayon_1.3.4 zip_1.0.0 purrr_0.2.5 glue_1.3.0 labeling_0.3 [26] openxlsx_4.1.0 stringi_1.2.4 compiler_3.5.0 pillar_1.3.1 scales_1.0.0 [31] pkgconfig_2.0.2",
    "url": "http://localhost:4000/docs/PBMC-12k-network.html",
    "relUrl": "/docs/PBMC-12k-network.html"
  },
  "3": {
    "id": "3",
    "title": "Sample Analysis with PBMC(12k) scRNA-seq data",
    "content": "Analysis on PBMC(12k) scRNA-seq data via scMINER Here we demonstrate our pipeline using PBMC (10x genmomics) scRNA-seq data [link to data matrix]. Full data contains 68k cells(link to 10x website), in order to provide a quicker guidance, we’ve down sampled this data to 12k cells. Original data website can be downloaded here. Installation scRNA-seq data preprocessing Read 10x genomics data Down sampling Quality control and data filtering Normalization and transformation Generate MICA input and command Run MICA clustering Cell type analysis from MICA output Reading MICA output Marker gene highlighting Assign cell type to cluster Network generation via SJARACNe Find cell type specific master regulator Calculate Inferred activity Find Differential activity TF R session Info Installation scMINER is based on python and R, with a single R package glued all essential functions together. scRNA-seq data preprocessing This can be done by any scRNA-seq preprocessing pipeline. We encourage user to feed in all genes from your data for MICA, instead of highly variable genes only. Here, in order to stick to the focus, we only demonstrate a quick function to conduct gene/cell filtering, without any data exploratory visualization. Read 10x genomics data Read 10x genomics data wih function embeded in scMINER package. This function could help read either 10x genomics standard output, as well as other text files types by passing arguments to read.delim(). If set CreateSparseEset=T This will help create a Sparse matrix object using Expressionset prototype, otherwise, it will create a list Object that stores expression data, feature data and sample data in different slots. If add.meta=T, then corresponding sample info such as total number of UMI will be calcualated and outputed. d &lt;- d.68k &lt;- readscRNAseqData(file=&quot;../PBMC68k_input/&quot;,is.10x = TRUE,CreateSparseEset = F, add.meta=F) Down sampling In order to provide a quicker guidance, we’ve down sampled this data to 12k cells. set.seed(1) d.12k&lt;-d[,sample(colnames(d),12000)] dim(d.12k) #[1] 32738 12000 You can also create Sparse Matrix expression by using CreateSparseEsetfunction: eset.12k&lt;-CreateSparseEset(data=d.12k,feature.data = d.68k$feature.data,add.meta = T) Quality control and data filtering Quality control assessments could be done using draw.scRNAseq.QC step, this will output a Rmarkdown generated report, including essential figures for at both gene and cell level. Suggested cutoff will be returned as a list if output.cutoff was set to be TRUE. cutoffs &lt;- draw.scRNAseq.QC(SparseEset=eset.12k, project.name = &quot;PBMC12k&quot;, plot.dir = &quot;./QC/&quot;, group = &quot;group&quot;, output.cutoff = TRUE) Second plot will visualize total UMI count, and total number of gene expressed. Third plot will visualize mitochondria percentage, and spike-in percentage for each cell. Then you could run cell filtering as simple as below, if feed cutoffs calculated previously from draw.scRNAseq.QC functon. You could also manually change cutoffs by reassign numbers in cutoffs list, e.g. set cutoffs$umi_cf_hi&lt;-Inf means do not do filtering on high total UMI value. cutoffs$umi_cf_hi&lt;-Inf #only filter on low total number of UMI eset.sel&lt;-preMICA.filtering(SparseEset = eset.12k,cutoffs = cutoffs) Normalization and transformation In MICA, we don’t provide a vriety of methods to do normalizaton, you can use your own prefered normalization method. Here we provide an example of doing CPM and log2 transformation. norm = 1e6 exp.norm &lt;- sweep(exprs(eset.sel), 2, norm/unname(Matrix::colSums(exprs(eset.sel))), &#39;*&#39;) # log transformation exp.log2 &lt;- log(exp.norm+1,base=2) # save as SparseEset eset.norm&lt;-CreateSparseEset(data=exp.log2,meta.data = pData(eset.sel),feature.data = fData(eset.sel),add.meta = F) Generate MICA input and command After reviewing all visualization and conduct filtering, you can go ahead and generate clustering(MICA) input, which will be a cell by gene txt file. If your data was not generated by 10x genomics, you can prepare your own filtering and use this step for clustering Input generation, please note that you should always feed MICA the log or log2 transformed data. generateMICAinput(data= exp.log2 ,filename=&quot;PBMC12k_MICA_input.txt&quot;) This will output a txt file containing filtered expression matrix for MICA. We also provide a function for you to generate MICA command without writing your own scripts. If you set host=lsf, then you need to define queue required, and memory (optional). In num_cluster, you can input a vector of number of K to achieve clustering membership for different k simultaneously. generate_MICA_cmd(save_sh_at = &quot;./PBMC12k_v3/&quot;, input_file = &quot;./PBMC12k_v3/PBMC12k_MICA_input.txt&quot;, project_name = &quot;PBMC12k&quot;,num_cluster = c(8,9,10,12,13,14,15), host = &quot;lsf&quot;, queue = [your_queue_name], output_path = &quot;./&quot;,queue = &quot;standard&quot;) Run MICA clustering MICA is implemented in Python. If you would like to install MICA, please infer MICA github page.There are several parameters for you to choose when running MICA. A more comprehensive tutorial could be found here for local and here for lsf.Here recommend save your working directory before running MICA. Cell type analysis from MICA output First, after clustering via MICA(see [MICA] (/docs/MICA.html), you can load MICA output (in .txt) as well as input expression matrix in R under an expressionSet. This is going to be the major data structure we used for downstream analysis in R. Reading MICA output You can start with one MICA membership and study your optimal number of cluster with cell type specific markers. eset.12k &lt;- readMICAoutput(Obj = d.sel,load_clust_label = TRUE, output_file = &quot;MICA/PBMC12k_k8_tsne_ClusterMem.txt&quot;) To visualize MICA label or other metadata, you can use function MICAplot. MICAplot(input_eset = eset.12k,visualize = &#39;tSNE&#39;,X = &quot;X&quot;,Y=&quot;Y&quot;,label = &quot;label&quot;,pct = 0.5) Marker gene highlighting Picked marker genes could be visualized on t-SNE scatterplot, heatmap or violinplot. This will help pick up a reasonable number of cluster. gn.sel&lt;-c(&quot;CD3D&quot;,&quot;CD27&quot;,&quot;IL7R&quot;,&quot;SELL&quot;,&quot;CCR7&quot;,&quot;IL32&quot;,&quot;GZMA&quot;, &quot;GZMK&quot;,&quot;DUSP2&quot;,&quot;CD8A&quot;,&quot;GZMH&quot;,&quot;GZMB&quot;,&quot;CD79A&quot;,&quot;CD79B&quot;,&quot;CD86&quot;,&quot;CD14&quot;) p &lt;- feature_highlighting(input_eset = eset.12k,target = gn.sel,ylabel = &quot;log2Exp&quot;, x=&quot;X&quot;,y=&quot;Y&quot;,title.size = 12) p &lt;- feature_vlnplot(eset.12k,target=gn.sel,feature = &quot;geneSymbol&quot;, group_tag = &quot;label&quot;,ncol = 4,ylabel = &quot;log2Exp&quot;) feature_heatmap(eset = eset.12k,target = gn.sel,group_tag = &quot;label&quot;, save_plot = TRUE,width = 6,height = 6, name = &quot;log2_expression&quot;,plot_name=&quot;./GeneHeatmap.png&quot;) Assign cell type to cluster Here we curated a reference signature list of 8 immune cell types(link) for cell type annotation. In marker_bbplot function, we calculated cell type scores for each clusters, and visualize scores using heatmap. ref&lt;-read.xlsx(&quot;Immune_signatures.xlsx&quot;) head(ref) &gt; head(ref) celltype markers weight 1 NaiveT SELL 1 2 NaiveT CCR7 1 3 Tmem IL7R 1 4 Tmem CD27 1 5 Tmem IL32 1 6 Tmem GZMA -1 p&lt;-marker_bbplot(ref=ref,eset=eset.12k) We recommend assign your celltype as factors in your expression set. indx&lt;-factor(x=c(&quot;NaiveT&quot;,&quot;Tmem&quot;,&quot;CD8em&quot;,&quot;CD8eff&quot;,&quot;Bcell&quot;,&quot;NK&quot;,&quot;DC&quot;,&quot;Mo&quot;), levels=c(&quot;NaiveT&quot;,&quot;Tmem&quot;,&quot;CD8em&quot;,&quot;CD8eff&quot;,&quot;Bcell&quot;,&quot;NK&quot;,&quot;DC&quot;,&quot;Mo&quot;)) eset.12k$celltype &lt;- indx[eset.12k$label] Network generation via SJARACNe In order to generate cell type/group/cluster specific network, group information should be stored under pData([your_expressionSet]). And R function generateSJAracneInput will help to partition your expression matrix and conduct a loose filtering of your scRNA-seq data(filter about 0 expressed genes in cluster). Besides, a reference TF list should be provided as tf.ref to guide hub gene selection. Each group will create one directory which contains filtered expression matrix in .exp format, as long as the filtered TF list in .txt. generateSJAracneInput(eset=eset.12k,tf.ref=tf.ref,wd.src=&quot;Sjaracne/&quot;, group_tag=&quot;celltype&quot;) Warning: SJARACNe has not been integrated into scMINER yet, please consult here for installation and basic usage. Here recommend save your working directory before running SJARACNe. indir=~/PBMC12K/SJARACNE_PBMC12K/ for i in $(ls -d */ | cut -f1 -d&#39;/&#39;);do sjaracne ${i} $indir/${i}/*.exp $indir/${i}/tf/*.txt $indir/${i}/tf/ --c_threshold 0.01; echo ${i} has been submitted!; done Find cell type specific master regulator Identify master regulator from content based network is the key step in scMINER to help understanding your scRNA-seq data. Calculate Inferred activity TF acitivities are calculated by integrating expression profile of their targets. Targets identified from SJARACNe of perticular TF was normalized and averaged to infer TF activity. acs.12k &lt;- GetActivityFromSJARANCE( SJaracne_output_path=&quot;Sjaracne/&quot;, SJaracne_input_eset=eset.demo, activity.method=&quot;unweighted&quot;, activity.norm=TRUE, group_tag = &quot;celltype&quot;, save_network_file=FALSE, save_path=NA) Find Differential activity TF The function FindDAG was designed for identify highly differentiated TF from SJARACNe inferred activity matrix. In order to do so, we did two sided student’s t-test to compare mean acitivty from one cell type V.S. the others. DAG_result &lt;- FindDAG(eset = acs.demo,group_tag = &quot;celltype&quot;) This function will output a full matrix that contians all TF occurred in original dataset, statistics such as t.statistics, p-value, 95%CI, etc. are outputed to help idenify master regulators. You can save it in txt or xlsx for checking. While you can also visualize top master regulator candidates in heatmap or violinplots. Only png as plotting device is supported. TF_list &lt;- TopMasterRegulator(DAG_result = DAG_result, celltype=levels(acs.12k$celltype), # ensure cluster order n = 5, degree_filter = c(50,500)) feature_heatmap(eset = acs.12k,target = TF_list,group_tag = &quot;celltype&quot;,feature = &quot;geneSymbol&quot;, width = 6,height = 6, save_plot=TRUE, cluster_rows = FALSE, name = &quot;Activity&quot;,plot_name=&quot;./21_TopTFHeatmap.png&quot;) You can also check some known master regulators as postivie control of your network analysis: p &lt;- feature_vlnplot(eset=acs.12k,target=c(&quot;LEF1.TF&quot;,&quot;TCF7.TF&quot;,&quot;BATF.TF&quot;,&quot;TCF7.TF&quot;,&quot;TBX21.TF&quot;, &quot;IRF8.TF&quot;,&quot;SPIB.TF&quot;,&quot;BATF3.TF&quot;,&quot;CEBPA.TF&quot;), ylabel = &quot;Activity&quot;,group_tag = &quot;celltype&quot;,drawquantiles = FALSE, ncol = 2) In order to conduct more advanced network analysis utilizing SJARACNe generated cell type specific networks, please infer Cell-type spefic network analysis tab. R session Info &gt; sessionInfo() R version 3.5.2 (2018-12-20) Platform: x86_64-apple-darwin15.6.0 (64-bit) Running under: macOS Mojave 10.14.3 Matrix products: default BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: [1] grid parallel stats graphics grDevices utils datasets methods base other attached packages: [1] scMINER_0.1.0 kableExtra_1.1.0 knitr_1.24 rmarkdown_1.14 cowplot_1.0.0 [6] dplyr_0.8.3 pheatmap_1.0.12 ComplexHeatmap_1.20.0 scales_1.0.0 RColorBrewer_1.1-2 [11] ggplot2_3.2.1 reshape2_1.4.3 Biobase_2.42.0 BiocGenerics_0.28.0 Matrix_1.2-17 loaded via a namespace (and not attached): [1] Rcpp_1.0.2 pillar_1.4.2 compiler_3.5.2 plyr_1.8.4 tools_3.5.2 zeallot_0.1.0 [7] digest_0.6.20 viridisLite_0.3.0 evaluate_0.14 tibble_2.1.3 gtable_0.3.0 lattice_0.20-38 [13] pkgconfig_2.0.2 rlang_0.4.0 rstudioapi_0.10 xfun_0.8 xml2_1.2.2 httr_1.4.1 [19] withr_2.1.2 stringr_1.4.0 vctrs_0.2.0 hms_0.5.0 GlobalOptions_0.1.0 webshot_0.5.1 [25] tidyselect_0.2.5 glue_1.3.1 R6_2.4.0 GetoptLong_0.1.7 readr_1.3.1 purrr_0.3.2 [31] magrittr_1.5 backports_1.1.4 htmltools_0.3.6 rvest_0.3.4 assertthat_0.2.1 shape_1.4.4 [37] circlize_0.4.6 colorspace_1.4-1 stringi_1.4.3 lazyeval_0.2.2 munsell_0.5.0 crayon_1.3.4 [43] rjson_0.2.20",
    "url": "http://localhost:4000/docs/PBMC-12k.html",
    "relUrl": "/docs/PBMC-12k.html"
  },
  "4": {
    "id": "4",
    "title": "",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. Header 1 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. Header 2 This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, &quot;= #{version}&quot;) end Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 head1 head two three ok good swedish fish nice out of stock good and plenty nice ok good oreos hmm ok good zoute drop yumm There’s a horizontal rule below this. Here is an unordered list: Item foo Item bar Item baz Item zip And an ordered list: Item one Item two Item three Item four And a nested list: level 1 item level 2 item level 2 item level 3 item level 3 item level 1 item level 2 item level 2 item level 2 item level 1 item level 2 item level 2 item level 1 item And a task list Hello, this is a TODO item Hello, this is another TODO item Goodbye, this item is done Small image Large image Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element.",
    "url": "http://localhost:4000/docs/index-test.html",
    "relUrl": "/docs/index-test.html"
  },
  "5": {
    "id": "5",
    "title": "Welcome to scMINER",
    "content": "scMINER is a system biology analysis frame work for high-throughput single cell RNA-seq data implemented primarily in R and python. This package offers a combination of several individual tools including but not limit to MICA (Mutual Information based Clustering analysis) and [SJARACNe] (https://github.com/jyyulab/SJARACNe). Installation instructions for each individual tools are available on github through links above. Get started now View it on GitHub Getting started Dependencies scMINER is depend on python3 and R. Local installation: Install scMINER from github: #install dev_tool first install.packages(devtools) devtools::install_github(&quot;jyyulab/scMINER&quot;) Install MICA from source: $ git clone https://github.com/jyyulab/MICA $ cd MICA $ python setup.py install Install SJARACNe from source: $ git clone https://github.com/jyyulab/SJARACNe $ cd SJARACNe $ python setup.py install About the project License Just the Docs is distributed by an MIT license. Contributing When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in our GitHub repo.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  
}

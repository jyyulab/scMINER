activity.norm=TRUE,
save_network_file=FALSE,
save_path=NA)
{
eset<-SJaracne_input_eset;
if(!group_tag%in%colnames(pData(eset))){
stop('Check your group_tag please.','\n')
}
#retrieve networks
output.files<-list.files(path=SJaracne_output_path,
pattern="consensus_network_3col_.txt",recursive = TRUE,full.names = TRUE)
print(output.files)
#initialize actiivty list
acs_master<-data.frame(geneSymbol=NA,stringsAsFactors=FALSE)
deg_master<-data.frame(geneSymbol=NA,stringsAsFactors=FALSE)
eset<-SJaracne_input_eset
for( i in 1:length(output.files)){
net.name<-gsub(SJaracne_output_path,"",output.files[i])
net.name<-gsub("\\_.*","",net.name);
net.name<-gsub("[/]","",net.name)
cat("Retrieve Network from ",i,net.name,"\n")
TF.table<-read.table(output.files[i],header = TRUE,
stringsAsFactors = FALSE,check.names = FALSE)
if(save_network_file)
{ gsc <- getGSC(tf = TF.table)
save(gsc,file=file.path(save_path,paste0("gsc.",netname)))}
cat("Calculate Activity for ",net.name,"!",'\n')
eset.sel<-eset[,pData(eset)[,group_tag]==net.name]
fData(eset.sel)$geneSymbol<- fData(eset.sel)$geneNames
acs.tmp<-get_activity(Net = TF.table,tag = "TF",normalize=activity.norm,
eset = eset.sel, activity.method = activity.method)
acs<-t(cbind(acs.tmp));rm(acs.tmp)
#update full gene list
acs.ID <- sapply(strsplit(rownames(acs),"_"),"[",1)
acs.deg <- data.frame(geneSymbol=acs.ID,
Degree=as.numeric(sapply(strsplit(rownames(acs),"_"),"[",2)),
stringsAsFactors=FALSE)
acs.tmp <- acs; rownames(acs.tmp)<-acs.ID
acs_master<-merge(acs_master,acs.tmp,by.x="geneSymbol",by.y="row.names",all=TRUE)
deg_master<-merge(deg_master,acs.deg,by="geneSymbol",all=TRUE)
colnames(deg_master)[i+1]<-paste0("degree_",net.name)
cat("Activity Done!!","\n")
rm(acs)
cat('==============================================',"\n")
gc()
}#end for
# generate acs expression set
deg_master<-filter(deg_master,!is.na(geneSymbol))
fd <- data.frame(row.names=deg_master$geneSymbol,
geneSymbol=sapply(strsplit(deg_master$geneSymbol,"\\."),"[",1),
FuncType=sapply(strsplit(deg_master$geneSymbol,"\\."),"[",2),
deg_master[,-1],stringsAsFactors = FALSE)
pd <- pData(eset)
acs.mtx <- as.matrix(acs_master[,-1])
rownames(acs.mtx)<- acs_master$geneSymbol
acs.mtx<-acs.mtx[,rownames(pd)]
acs.mtx<-acs.mtx[-which(is.na(rownames(acs.mtx))),]
acs.eset<-new("ExpressionSet",phenoData= new("AnnotatedDataFrame",pd),
featureData=new("AnnotatedDataFrame",fd), annotation="",exprs=as.matrix(acs.mtx))
return(acs.eset)
}
##################
###need editing
acs.demo<-GetActivityFromSJARANCE(SJaracne_output_path="Sjaracne/",SJaracne_input_eset=eset.demo,
activity.method="unweighted",activity.norm=TRUE,
save_network_file=FALSE, save_path=NA)
##################
###need editing
acs.demo<-GetActivityFromSJARANCE(SJaracne_output_path="Sjaracne/",SJaracne_input_eset=eset.demo,
activity.method="unweighted",activity.norm=TRUE,group_tag = "celltype",
save_network_file=FALSE, save_path=NA)
# find a way to Define highly variable Master regulators
res <- aov.test(eset = acs.demo,group_tag = "celltype",trouble_shooting = FALSE)
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype",trouble_shooting = FALSE)
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
?sink()
try(log(3))
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs<-fData(eset);rs$id<-d$id
#sink()
da <-try(plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]))
#sink()
rs<-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype",print_screen = FALSE)
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs<-fData(eset);rs$id<-d$id
sink("AnovaInnerOutputs")
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
sink()
rs<-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype",print_screen = FALSE)
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs<-fData(eset);rs$id<-d$id
#sink("AnovaInnerOutputs")
invisible(capture.output(da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])))
#sink()
rs<-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype",print_screen = FALSE)
?force
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs<-fData(eset);rs$id<-d$id
sink(tempfile())
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
sink()
rs<-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
?force
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype",print_screen = FALSE)
###Differential Activity analysis#######
###Anova####
HVG_Anova<-function(d,group){
d.tmp<-unlist(d[,-1])
d.tmp<-data.frame(acs=d.tmp,group=group,stringsAsFactors = FALSE)
d.sel<-d.tmp[complete.cases(d.tmp),]
d.sel$group<-as.factor(d.sel$group)
n.cases<-nlevels(d.sel$group)
#print(n.cases)
if(n.cases>1){
rs.lm<-lm(data = d.sel,formula = acs~group)
sink(tempfile())
rs.aov<-Anova(rs.lm,Type="II",white.adjust=TRUE)
sink()
rs.aov<-c(id=d$acs.id,F.value = (rs.aov$F)[1],pval = (rs.aov$`Pr(>F)`)[1])
}else{
rs.aov<-c(id=d$acs.id,F.value = NA, pval= NA)
}
rs.acs<-tapply(d.tmp$acs, list(d.tmp$group), mean)
names(rs.acs)<-paste0("MeanAct_",names(rs.acs))
rs<-c(rs.aov,rs.acs)
return(rs)
}
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs<-fData(eset);rs$id<-d$id
sink(tempfile())
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
sink()
rs<-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
###Differential Activity analysis#######
###Anova####
HVG_Anova<-function(d,group){
d.tmp<-unlist(d[,-1])
d.tmp<-data.frame(acs=d.tmp,group=group,stringsAsFactors = FALSE)
d.sel<-d.tmp[complete.cases(d.tmp),]
d.sel$group<-as.factor(d.sel$group)
n.cases<-nlevels(d.sel$group)
#print(n.cases)
if(n.cases>1){
rs.lm<-lm(data = d.sel,formula = acs~group)
invisible(capture.output(rs.aov<-Anova(rs.lm,Type="II",white.adjust=TRUE)))
rs.aov<-c(id=d$acs.id,F.value = (rs.aov$F)[1],pval = (rs.aov$`Pr(>F)`)[1])
}else{
rs.aov<-c(id=d$acs.id,F.value = NA, pval= NA)
}
rs.acs<-tapply(d.tmp$acs, list(d.tmp$group), mean)
names(rs.acs)<-paste0("MeanAct_",names(rs.acs))
rs<-c(rs.aov,rs.acs)
return(rs)
}
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs<-fData(eset);rs$id<-d$id
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
rs<-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
?invisible
###Differential Activity analysis#######
###Anova####
HVG_Anova<-function(d,group){
d.tmp<-unlist(d[,-1])
d.tmp<-data.frame(acs=d.tmp,group=group,stringsAsFactors = FALSE)
d.sel<-d.tmp[complete.cases(d.tmp),]
d.sel$group<-as.factor(d.sel$group)
n.cases<-nlevels(d.sel$group)
#print(n.cases)
if(n.cases>1){
rs.lm<-lm(data = d.sel,formula = acs~group)
rs.aov<-try(Anova(rs.lm,Type="II",white.adjust=TRUE))
rs.aov<-c(id=d$acs.id,F.value = (rs.aov$F)[1],pval = (rs.aov$`Pr(>F)`)[1])
}else{
rs.aov<-c(id=d$acs.id,F.value = NA, pval= NA)
}
rs.acs<-tapply(d.tmp$acs, list(d.tmp$group), mean)
names(rs.acs)<-paste0("MeanAct_",names(rs.acs))
rs<-c(rs.aov,rs.acs)
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
?try
###Differential Activity analysis#######
###Anova####
HVG_Anova<-function(d,group){
d.tmp<-unlist(d[,-1])
d.tmp<-data.frame(acs=d.tmp,group=group,stringsAsFactors = FALSE)
d.sel<-d.tmp[complete.cases(d.tmp),]
d.sel$group<-as.factor(d.sel$group)
n.cases<-nlevels(d.sel$group)
#print(n.cases)
if(n.cases>1){
rs.lm<-lm(data = d.sel,formula = acs~group)
rs.aov<-try(Anova(rs.lm,Type="II",white.adjust=TRUE),silent = TRUE)
rs.aov<-c(id=d$acs.id,F.value = (rs.aov$F)[1],pval = (rs.aov$`Pr(>F)`)[1])
}else{
rs.aov<-c(id=d$acs.id,F.value = NA, pval= NA)
}
rs.acs<-tapply(d.tmp$acs, list(d.tmp$group), mean)
names(rs.acs)<-paste0("MeanAct_",names(rs.acs))
rs<-c(rs.aov,rs.acs)
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <-fData(eset);rs$id<-d$id
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
rs <-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
{sink(tempfile());
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
rs <-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
# find a way to Define highly variable Master regulators
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
eset<-eset.demo
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
{sink(tempfile());
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
group_tag<-"celltype"
{sink(tempfile());
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
{sink(tempfile(),type="message");
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
sink()
{sink(tempfile(),type="message");
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
sink(tempfile(),type="message")\
sink(tempfile(),type="message")
{sink(file=tempfile(),type="message");
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
{sink(file=NULL,type="message");
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
eset<-acs.demo
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
tempfile()
?tempfile
{sink(file = tempfile(),type="message");
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
tmp<-tempfile()
{sink(file = tmp,type="message");
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
sink()}
silence <- function() {
invisible(capture.output(f()))
}
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
rs <-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
silence <- function() {
invisible(capture.output(f()))
}
silence <- function(xx) {
invisible(capture.output(xx))
}
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
rs <-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
###Anova####
HVG_Anova<-function(d,group){
d.tmp<-unlist(d[,-1])
d.tmp<-data.frame(acs=d.tmp,group=group,stringsAsFactors = FALSE)
d.sel<-d.tmp[complete.cases(d.tmp),]
d.sel$group<-as.factor(d.sel$group)
n.cases<-nlevels(d.sel$group)
#print(n.cases)
if(n.cases>1){
rs.lm<-lm(data = d.sel,formula = acs~group)
rs.aov<-silence(Anova(rs.lm,Type="II",white.adjust=TRUE))
rs.aov<-c(id=d$acs.id,F.value = (rs.aov$F)[1],pval = (rs.aov$`Pr(>F)`)[1])
}else{
rs.aov<-c(id=d$acs.id,F.value = NA, pval= NA)
}
rs.acs<-tapply(d.tmp$acs, list(d.tmp$group), mean)
names(rs.acs)<-paste0("MeanAct_",names(rs.acs))
rs<-c(rs.aov,rs.acs)
return(rs)
}
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]);
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
###Anova####
HVG_Anova<-function(d,group){
d.tmp<-unlist(d[,-1])
d.tmp<-data.frame(acs=d.tmp,group=group,stringsAsFactors = FALSE)
d.sel<-d.tmp[complete.cases(d.tmp),]
d.sel$group<-as.factor(d.sel$group)
n.cases<-nlevels(d.sel$group)
#print(n.cases)
if(n.cases>1){
rs.lm<-lm(data = d.sel,formula = acs~group)
rs.aov<-suppressWarnings(Anova(rs.lm,Type="II",white.adjust=TRUE))
rs.aov<-c(id=d$acs.id,F.value = (rs.aov$F)[1],pval = (rs.aov$`Pr(>F)`)[1])
}else{
rs.aov<-c(id=d$acs.id,F.value = NA, pval= NA)
}
rs.acs<-tapply(d.tmp$acs, list(d.tmp$group), mean)
names(rs.acs)<-paste0("MeanAct_",names(rs.acs))
rs<-c(rs.aov,rs.acs)
return(rs)
}
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
rs <-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
res <- FindHVG(eset = acs.demo,group_tag = "celltype")
sink(tempfile())
sink()
sink.number()
sink.number( da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag]))
sink.number(type = "message")
sink(tempfile(),type="message")
zz <- tempfile()
sink(zz)
sink(zz,type=message)
sink(zz,type="message")
sink(zz)
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
zz <- file("all.Rout", open = "wt")
sink(zz,type="message")
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
sink()
?unlink
unlink(zz)
sink.number(zz)
sink()
sink()
unlink(zz)
zz
unlink("all.Rout")
###Wrapper of Anova###
FindHVG<-function(eset=acs.demo,group_tag="celltype",
print_screen=TRUE){
if(!group_tag%in%colnames(pData(eset))) {
cat('Please check your group_tag!',"\n")}
d<-data.frame(id=featureNames(eset),exprs(eset),stringsAsFactors=FALSE)
rs <- fData(eset);rs$id<-d$id
zz <- file("all.Rout", open = "wt")
sink(zz,type="message")
da <- plyr::ddply(d,'id','HVG_Anova',group=pData(eset)[,group_tag])
sink()
unlink("all.Rout")
rs <-merge(rs,da,by="id")
if(print_screen){
cat("Top 10 highly variable TF...")
indx<-sort.int(da$F.value, decreasing = TRUE,na.last = NA,index.return=TRUE)$ix[1:10]
cat(da$id[indx],"\n")
}
return(rs)
}
res <- FindHVG(eset = acs.demo,group_tag = "celltype",print_screen = FALSE)
head(res)
# t-test
res <- FindDAG(eset=acs.demo,group_tag = "celltype")

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_analysis.R
\name{generateSJARACNeInput}
\alias{generateSJARACNeInput}
\title{Generate the standard input files for SJARACNe from sparse eset object}
\usage{
generateSJARACNeInput(
  input_eset,
  group_name = "clusterID",
  group_name.refine = FALSE,
  sjaracne_dir,
  species_type = "hg",
  driver_type = "TF_SIG",
  customDriver_TF = NULL,
  customDriver_SIG = NULL,
  downSample_N = 1000,
  seed = 123,
  superCell_N = NULL,
  superCell_count = 100,
  superCell_gamma = 10,
  superCell_knn = 5,
  superCell_nHVG = 1000,
  superCell_nPC = 10,
  superCell_save = TRUE,
  print_command = FALSE,
  save_command = TRUE
)
}
\arguments{
\item{input_eset}{The expression set object that filtered, normalized and log-transformed}

\item{group_name}{Character, name of the column for grouping, usually the column of cell types or clusters. Default: "\code{clusterID}".}

\item{group_name.refine}{Logical, whether to replace the non-word characters in group names with underscore symbol ("_"). The improper
filename characters may cause troubles, since scMINER creates a folder for each group using the group names. Set this argument to \code{TRUE} can help avoid this issue. Default: \code{FALSE}.}

\item{sjaracne_dir}{The path to the folder for SJARACNe runs. Both the inputs and outputs will be saved here.}

\item{species_type}{Character, species of the pre-defined driver list to use: "\code{hg}" for human or "\code{mm}" for mouse. Default: \code{hg}.}

\item{driver_type}{Character, type of the pre-defined driver list to use: "\code{TF}" for transcriptional factors only, "\code{SIG}" for signaling genes only, or "\code{TF_SIG}" for both. Default: "\code{TF_SIG}".}

\item{customDriver_TF}{A character vector or \code{NULL}, genes used to replace the pre-defined transcriptional factor driver list. This allows the user to customize the TF driver list. Default: \code{NULL}.}

\item{customDriver_SIG}{A character vector or \code{NULL}, genes used to replace the pre-defined signaling gene driver list. This allows the user to customize the SIG driver list. Default: \code{NULL}.}

\item{downSample_N}{Integer or \code{NULL}, if an integer is given, the groups with more cells than this integer will be down-sampled to this integer. A number between 500 to 3000 gives a good balance
between robustness and computational efficiency. If \code{NULL}, the downsampling would be skipped. Default: 1000.}

\item{seed}{Non-negative integer, seed of random sampling. Default: 123.}

\item{superCell_N}{Integer or \code{NULL}, if an integer is given, the metacell method would be performed by SuperCell package to the groups with more cells than this integer. If NULL, no metacell method would be done. Default: \code{NULL}.}

\item{superCell_count}{Integer, number of metacells to generate by SuperCell. Default: 100. Ignored if \code{superCell_N} = \code{NULL}.}

\item{superCell_gamma}{Integer, graining level of data by SuperCell (proportion of number of single cells in the initial dataset to the number of metacells in the final dataset). Default: 10. Ignored if \code{superCell_N} = \code{NULL}.}

\item{superCell_knn}{Integer, the k value to compute single-cell kNN network by SuperCell. Default: 5. Ignored if \code{superCell_N} = \code{NULL}.}

\item{superCell_nHVG}{Integer, number of genes with the largest variation to use by SuperCell. Default: 1000. Ignored if \code{superCell_N} = \code{NULL}.}

\item{superCell_nPC}{Integer, number of principal components to use for construction of single-cell kNN network by SuperCell.Default: 10. Ignored if \code{superCell_N} = \code{NULL}.}

\item{superCell_save}{Logical, whether to save the results generated by SuperCell, including membership and other components. Default: TRUE. Ignored if \code{superCell_N} = \code{NULL}.}

\item{print_command}{Logical, whether to print the command to run SJARACNe to screen. Default: \code{FALSE}.}

\item{save_command}{Logical, whether to save the command to run SJARACNe. Default: \code{TRUE}.}
}
\value{
This function will generate several folders and files in the directory specified by "\code{sjaracne_dir}":
\enumerate{
\item a folder for each group in the column specified by "\code{group_name}";
\item In each folder:
\itemize{
\item a "\strong{\code{.exp.txt}}" file: expression matrix, features by cells.
\item a "\strong{\code{TF}}" folder containing a "\strong{\code{.tf.txt}}" file: this file contains the TF driver list.
\item a "\strong{\code{SIG}}" folder containing a "\strong{\code{.sig.txt}}" file: this file contains the SIG driver list.
\item a bash script (\strong{\code{runSJARACNe.sh}}) to run SJARACNe. Further modification is needed to run it.
\item a json file (\strong{\code{config_cwlexec.json}}) containing parameters to run SJARACNe.
}
}
}
\description{
This function is used to generate the standard input files for SJARACNe, a scalable software tool for gene network reverse engineering from big data.
}
\examples{
## 1. The most commonly used command: pre-defined driver lists, automatic down-sampling, no metacell method
generateSJARACNeInput(input_eset = normalized.eset, group_name = "cell_type", sjaracne_dir = "./SJARACNe", species_type = "hg", driver_type = "TF_SIG")

## 2. to disable the downsampling
generateSJARACNeInput(input_eset = normalized.eset, group_name = "cell_type", sjaracne_dir = "./SJARACNe", species_type = "hg", driver_type = "TF_SIG", downSample_N = NULL)

## 3. Use the customized driver list: TUBB4A is the gene of interest but currently not in the pre-defined driver list.
hg_driver <- getDriverList(species_type = "hg", driver_type = "TF_SIG")
"TUBB4A" \%in\% hg_driver # It would returen FALSE if TUBB4A is not in the pre-defined driver lists
generateSJARACNeInput(input_eset = normalized.eset, group_name = "cell_type", sjaracne_dir = "./SJARACNe", species_type = "hg", driver_type = "TF_SIG", customDriver_TF = c(getDriverList(species_type = "hg", driver_type = "TF"), "TUBB4A")) # when the driver-to-add is known as a transcription factor
generateSJARACNeInput(input_eset = normalized.eset, group_name = "cell_type", sjaracne_dir = "./SJARACNe", species_type = "hg", driver_type = "TF_SIG", customDriver_SIG = c(getDriverList(species_type = "hg", driver_type = "SIG"), "TUBB4A")) # when the driver-to-add is known as a non-transcription factor
generateSJARACNeInput(input_eset = normalized.eset, group_name = "cell_type", sjaracne_dir = "./SJARACNe", species_type = "hg", driver_type = "TF_SIG", customDriver_TF = c(getDriverList(species_type = "hg", driver_type = "TF"), "TUBB4A"), customDriver_SIG = c(getDriverList(species_type = "hg", driver_type = "SIG"), "TUBB4A")) # when it's ambiguous to tell if the driver-to-add is a transcriptional factor

## 4. Use the metacell method
generateSJARACNeInput(input_eset = normalized.eset, group_name = "cell_type", sjaracne_dir = "./SJARACNe", species_type = "hg", driver_type = "TF_SIG", superCell_N = 1000, superCell_count = 100, seed = 123)
}

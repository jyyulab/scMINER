[{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://jyyulab.github.io/scMINER/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get started","title":"A quick tutorial to run scMINER","text":"","code":"library(scMINER) library(dplyr) library(ggplot2) library(anndata) library(hdf5r)"},{"path":[]},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"create-project-space","dir":"Articles","previous_headings":"Data preprocessing","what":"Create project space","title":"A quick tutorial to run scMINER","text":"project space created scMINER folder can keep data centralized organized also make scMINER pipeline smooth robust. encourge create project space studies. creates folder named PBMC14k directory /-path, creates four subfolders : DATA: save sparse eSet objects files; MICA: save inputs outputs mutual information-based clustering analysis; SJARACNe: save inputs outputs network inference quality control; PLOT: save files data visualization.","code":"scminer_dir <- createProjectSpace(project_dir = \"/your-path\", project_name = \"PBMC14k\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"generate-gene-expression-matrix","dir":"Articles","previous_headings":"Data preprocessing","what":"Generate gene expression matrix","title":"A quick tutorial to run scMINER","text":"scMINER provides four functions generate gene expression matrix multiple-format inputs: raw count matrix PBMC14k dataset embedded scMINER can easily fetched :","code":"## Input type 1: Data directory by 10x Genomics, containing matrix.mtx, barcodes.tsv and features.tsv (or genes.tsv) demo1_mtx <- readInput_10x.dir(input_dir = system.file(\"extdata/demo_inputs/cell_matrix_10x\", package = \"scMINER\"),                                featureType = \"gene_symbol\", removeSuffix = TRUE, addPrefix = \"demo1\")  ## Input type 2: Text-table file, eg. txt, tsv, csv demo2_mtx <- readInput_table(table_file = system.file(\"extdata/demo_inputs/table_file/demoData2.txt.gz\", package = \"scMINER\"),                              is.geneBYcell = TRUE, # set is.geneBYcell = FALSE to read features in columns and cells in rows                              sep = \"\\t\", removeSuffix = TRUE, addPrefix = \"demo2\")   ## Input type 3: HDF5 file by 10x Genomics demo2_mtx <- readInput_10x.h5(h5_file = system.file(\"extdata/demo_inputs/hdf5_10x/demoData2.h5\", package = \"scMINER\"),                               featureType = \"gene_symbol\", removeSuffix = TRUE, addPrefix = \"demo3\")  ## Input type 4: H5AD file demo4_obj <- readInput_h5ad(h5ad_file = system.file(\"extdata/demo_inputs/h5ad_file/demoData4.h5ad\", package = \"scMINER\"),                             removeSuffix = TRUE, addPrefix = \"demo4\") ## load the raw count matrix of PBMC14k dataset data(\"pbmc14k_rawCount\") dim(pbmc14k_rawCount) #> [1] 17986 14000 pbmc14k_rawCount[1:5,1:4] #> 5 x 4 sparse Matrix of class \"dgCMatrix\" #>               CACTTTGACGCAAT GTTACGGAAACGAA AGTCACGACAGGAG TTCGAGGACCAGTA #> AL627309.1                 .              .              .              . #> AP006222.2                 .              .              .              . #> RP11-206L10.3              .              .              .              . #> RP11-206L10.2              .              .              .              . #> RP11-206L10.9              .              .              .              ."},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"create-sparseeset-object","dir":"Articles","previous_headings":"Data preprocessing","what":"Create SparseEset object","title":"A quick tutorial to run scMINER","text":"SparseExpressionSet (SparseEset short) new class created scMINER handle sparsity scRNA-seq data. derived ExpressionSet, enables compress, store access efficiently conveniently. SparseEset object center scRNA-seq data analysis scMINER. SparseEset object can easily created gene expression matrix: createSparseEset() offers argument, addMetaData, automatically generate add 5 meta data statistics cells genes SparseEset object. also provides another two arguments, cellData featureData, allow add customized phenoData featureData. case, true labels cell types like add SparseEset object: multiple samples one project, please create one SparseEset object samples combined SparseEset objects one:","code":"## Create SparseEset object solely from gene expression matrix, meta data is automatically added pbmc14k_raw.eset <- createSparseEset(input_matrix = pbmc14k_rawCount, projectID = \"PBMC14k\", addMetaData = TRUE) ## Read the true lables of cell types embedded in scMINER R package true_label <- read.table(system.file(\"extdata/demo_pbmc14k/PBMC14k_trueLabel.txt.gz\", package = \"scMINER\"), header = T, row.names = 1, sep = \"\\t\", quote = \"\", stringsAsFactors = FALSE)  ## Create SparseEset object with self-customized metadata pbmc14k_raw.eset <- createSparseEset(input_matrix = pbmc14k_rawCount, cellData = true_label, featureData = NULL, projectID = \"PBMC14k\", addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #>  Adding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 17986 genes, 14000 cells.  head(pData(pbmc14k_raw.eset)) #>                trueLabel_full trueLabel projectID nUMI nFeature    pctMito #> CACTTTGACGCAAT CD14+ Monocyte  Monocyte   PBMC14k  764      354 0.01832461 #> GTTACGGAAACGAA CD14+ Monocyte  Monocyte   PBMC14k  956      442 0.01569038 #> AGTCACGACAGGAG CD14+ Monocyte  Monocyte   PBMC14k 7940     2163 0.01977330 #> TTCGAGGACCAGTA CD14+ Monocyte  Monocyte   PBMC14k 4177     1277 0.01149150 #> CACTTATGAGTCGT CD14+ Monocyte  Monocyte   PBMC14k  629      323 0.02066773 #> GCATGTGATTCTGT CD14+ Monocyte  Monocyte   PBMC14k  875      427 0.02628571 #>                pctSpikeIn         CellID #> CACTTTGACGCAAT          0 CACTTTGACGCAAT #> GTTACGGAAACGAA          0 GTTACGGAAACGAA #> AGTCACGACAGGAG          0 AGTCACGACAGGAG #> TTCGAGGACCAGTA          0 TTCGAGGACCAGTA #> CACTTATGAGTCGT          0 CACTTATGAGTCGT #> GCATGTGATTCTGT          0 GCATGTGATTCTGT table(pData(pbmc14k_raw.eset)$trueLabel_full) #>  #>               CD14+ Monocyte                      CD19+ B  #>                         2000                         2000  #>              CD4+/CD25 T Reg   CD4+/CD45RA+/CD25- Naive T  #>                         2000                         2000  #>          CD4+/CD45RO+ Memory                     CD56+ NK  #>                         2000                         2000  #> CD8+/CD45RA+ Naive Cytotoxic  #>                         2000 ## Create SparseEset from multiple samples # Step 1: create an SparseEset for each sample demo1_mtx <- readInput_10x.dir(input_dir = system.file(\"extdata/demo_inputs/cell_matrix_10x\", package = \"scMINER\"),                                featureType = \"gene_symbol\", removeSuffix = TRUE) demo1.eset <- createSparseEset(input_matrix = demo1_mtx, addMetaData = TRUE)  demo2_mtx <- readInput_table(table_file = system.file(\"extdata/demo_inputs/table_file/demoData2.txt.gz\", package = \"scMINER\"),                              is.geneBYcell = TRUE, sep = \"\\t\", removeSuffix = TRUE)  demo2.eset <- createSparseEset(input_matrix = demo2_mtx, addMetaData = TRUE)  # Step 2: combine the SparseEset objects of all samples combined.eset <- combineSparseEset(eset_list = c(demo1.eset, demo2.eset),                                    projectID = c(\"sample1\", \"sample2\"),                                    addPrefix = c(\"demo1\", \"demo2\"),                                    addSurfix = NULL, addMetaData = TRUE, imputeNA = TRUE)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"filter-sparseeset-object","dir":"Articles","previous_headings":"Data preprocessing","what":"Filter SparseEset object","title":"A quick tutorial to run scMINER","text":"mentioned , scMINER can automatically generate add 5 meta data statistics SparseEset object. 5 meta data statistics metrics scMINER uses assess quality cells features: nUMI: number total UMIs cell. Cells abnormally high nUMI usually indicate doublets, abnormally low nUMI usually indicate poorly sequenced cells empty droplets. nFeature: number expressed features/genes cell. Similar nUMI. pctMito: percentage UMIs mitochondrial genes (defined “mt-|MT-”) cell. Cells aberrantly high pctMito usually indicate dying cells. pctSpikeIn: percentage UMIs spike-RNAs (defined “ERCC-|Ercc-”)) cell. used estimate normalization factor. Cells extremely high low pctSpikeIn need removed. nCell: number cells expressing features/genes. Genes extremely low nCell poorly sequenced usually low variance. help assess data quality determine cutoffs used filtration, scMINER can generate html-format QC report: QC report contains variety tables plot key statistics data can help get better sense data quality determine cutoffs filtration. scMINER provides two modes perform SparseEset object filtration: auto: mode, filtration cutoffs automatically generated scMINER Median ± 3*MAD (maximum absolute deviation) method. mode works well majority test datasets. manual: mode, can manually specify cutoffs, low high, 5 metrics. cells features removed default cutoffs metrics. apply auto mode SparseEset filtration: command generates filtered SparseEset object pbmc14k_filtered.eset returns summary table detailed information filtration statistics. can refer adjust cutoffs accordingly. cases, may find cutoffs generated auto mode good, except one two. Though ‘hybrid’ mode, scMINER allow customize cutoffs generated auto mode. can easily done adding cutoffs customize auto mode: cutoffs generated auto model work well case like go self-customized cutoffs, can easily apply :","code":"## To generate QC report from SparseEset object drawSparseEsetQC(input_eset = pbmc14k_raw.eset, output_html_file = \"/your-path/PBMC14k/PLOT/pbmc14k_rawCount.html\", overwrite = FALSE)  ## scMINER also supports group-specific QC highlights drawSparseEsetQC(input_eset = pbmc14k_raw.eset, output_html_file = \"/your-path/PBMC14k/PLOT/pbmc14k_rawCount.html\", overwrite = FALSE, group_by = \"trueLabel\") ## Filter SparseEset object with the cutoffs automatically generated by scMINER pbmc14k_filtered.eset <- filterSparseEset(pbmc14k_raw.eset, filter_mode = \"auto\", filter_type = \"both\") #> Checking the availability of the 5 metrics ('nCell', 'nUMI', 'nFeature', 'pctMito', 'pctSpikeIn') used for filtration ... #> Checking passed! All 5 metrics are available. #> Filtration is done! #> Filtration Summary: #>  8846/17986 genes passed! #>  13605/14000 cells passed! #>  #> For more details: #>  Gene filtration statistics: #>      Metrics     nCell #>      Cutoff_Low  70 #>      Cutoff_High Inf #>      Gene_total  17986 #>      Gene_passed 8846(49.18%) #>      Gene_failed 9140(50.82%) #>  #>  Cell filtration statistics: #>      Metrics     nUMI        nFeature    pctMito     pctSpikeIn  Combined #>      Cutoff_Low  458     221     0       0       NA #>      Cutoff_High 3694        Inf     0.0408      0.0000      NA #>      Cell_total  14000       14000       14000       14000       14000 #>      Cell_passed 13826(98.76%)   14000(100.00%)  13778(98.41%)   14000(100.00%)  13605(97.18%) #>      Cell_failed 174(1.24%)  0(0.00%)    222(1.59%)  0(0.00%)    395(2.82%) ## Filter eSet under the auto mode, with customized values pbmc14k_filtered.eset <- filterSparseEset(pbmc14k_raw.eset, filter_mode = \"auto\", filter_type = \"both\", gene.nCell_min = 5) ## Filter SparseEset object with self-customized cutoffs pbmc14k_filtered.eset <- filterSparseEset(pbmc14k_raw.eset, filter_mode = \"manual\", filter_type = \"both\", gene.nCell_min = 10, cell.nUMI_min = 500, cell.nUMI_max = 6500, cell.nFeature_min = 200, cell.nFeature_max = 2500, cell.pctMito_max = 0.1)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"normalize-sparseeset-object","dir":"Articles","previous_headings":"Data preprocessing","what":"Normalize SparseEset object","title":"A quick tutorial to run scMINER","text":"scMINER recommends log2CPM method normalization: raw counts cell normalized library size 1 million, followed log2 transformation. normalized log-transformed SparseEset object can directly used Mutual Information-based clustering, network inference downstream analysis. ’s recommended save project space.","code":"pbmc14k_log2cpm.eset <- normalizeSparseEset(pbmc14k_filtered.eset, scale_factor = 1000000, log_base = 2, log_pseudoCount = 1) #> Done! The data matrix of eset has been normalized and log-transformed! #> The returned eset contains: 8846 genes, 13605 cells. saveRDS(pbmc14k_log2cpm.eset, file = \"/your-path/PBMC14k/DATA/pbmc14k_log2cpm.rds\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"mi-based-clustering-analysis","dir":"Articles","previous_headings":"","what":"MI-based clustering analysis","title":"A quick tutorial to run scMINER","text":"MICA (Mutual Information-based Clustering Analysis) clustering tool designed scRNA-seq data. developed Python take ’s strengths calculation speed memory consumption. component scMINER framework, MICA works seamlessly scMINER R package SparseEset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"generate-mica-input","dir":"Articles","previous_headings":"MI-based clustering analysis","what":"Generate MICA input","title":"A quick tutorial to run scMINER","text":"standard input MICA normalized log-transformed gene expression matrix. scMINER can generate matrix SparseEset object save file can directly read MICA. scMINER uses .txt default input file format. can generated : MICA accepts .h5ad .txt format input file, can easily generated embedded function generateMICAinput(): scMINER also supports .h5ad input file format getting popular scRNA-seq data storage sharing. can generated : addition generating standard MICA input file, generateMICAinput() also returns recommended commands running MICA. can copy commands, modify accordingly run.","code":"## Generate MICA input in txt format generateMICAinput(input_eset = pbmc14k_log2cpm.eset, output_file = \"/your-path/PBMC14k/MICA/micaInput.txt\", overwrite = FALSE)  ## Check the format of MICA input mica_input <- read.delim(system.file(\"extdata/demo_pbmc14k/MICA/micaInput.txt\", package = \"scMINER\"), header = T, sep = \"\\t\", row.names = 1) mica_input[1:5,1:5] ## Generate MICA input in h5ad format generateMICAinput(input_eset = pbmc14k_log2cpm.eset, output_file = \"/your-path/PBMC14k/MICA/micaInput.h5ad\", overwrite = FALSE)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"run-mica","dir":"Articles","previous_headings":"MI-based clustering analysis","what":"Run MICA","title":"A quick tutorial to run scMINER","text":"MICA features two different modes named different dimension reduction techniques: Multi-Dimensional Scaling (MDS) mode: mode accurate robust small datasets (less 5,000 cells, default) due global dimension reduction nature; Graph Embedding (GE) mode: mode works better large datasets (5,000 cells, default) using graph embedding approach explore distant neighbor cells. run MDS model: MDS model uses K-Means default clustering. argument -nck specifies number cluster K-Means. case, since 13,605 cells, use GE mode clustering: GE mode uses Louvain clustering. command generate clustering results multiple resolutions, 0.1 9.0, step size 0.05.","code":"mica mds -i /your-path/PBMC14k/MICA/micaInput.txt -o /your-path/PBMC14k/MICA/MDS -nck 5 6 7 8 9 10 mica ge -i /your-path/PBMC14k/MICA/micaInput.txt -o /your-path/PBMC14k/MICA/GE -minr 0.1 -maxr 9.0 -ss 0.05 -nw 40"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"add-mica-output-to-sparseeset-object","dir":"Articles","previous_headings":"MI-based clustering analysis","what":"Add MICA output to SparseEset object","title":"A quick tutorial to run scMINER","text":"MICA generates several files save output directory specified user -o argument. core, , output file need subsequent analysis clustering label file named format ProjectName_clustering_VisualizeMethod_euclidean_NumberOfDimensions_Resolution.txt. case, since used range resolutions, several clustering label files generated, one resolution. Based knowledge PBMC14k dataset, compared results different resolutions picked clustering_UMAP_euclidean_20_2.05.txt subsequent analysis. shown , clustering label file contains four columns: ID: cell barcodes; X: coordinates UMAP_1 tSNE_1; Y: coordinates UMAP_2 tSNE_2; label: labels predicted clusters. clustering result can easily easily added SparseEset object addMICAoutput(): ’s optional recommend save SparseEset object clustering resluts added:","code":"## Read the selected MICA output file micaOutput <- read.table(system.file(\"extdata/demo_pbmc14k/MICA/clustering_UMAP_euclidean_20_2.05.txt\", package = \"scMINER\"), header = TRUE, sep = \"\\t\", quote = \"\", stringsAsFactors = F) head(micaOutput) #>               ID        X        Y label #> 1 CACTTTGACGCAAT 14.91650 13.04096     6 #> 2 GTTACGGAAACGAA 14.57031 10.27093     6 #> 3 CACTTATGAGTCGT 14.28869 13.61674     6 #> 4 GCATGTGATTCTGT 14.12546 13.36319     6 #> 5 TAGAATACGTATCG 14.91227 11.19407     6 #> 6 CAAGAAGACCCTCA 15.34154 12.25821     6 ## Add MICA output into SparseEset object pbmc14k_clustered.eset <- addMICAoutput(input_eset = pbmc14k_log2cpm.eset,                                         mica_output_file = system.file(\"extdata/demo_pbmc14k/MICA/clustering_UMAP_euclidean_20_2.05.txt\", package = \"scMINER\"),                                         visual_method = \"umap\") # use \"tsne\" if t-SNE was used in MICA head(pData(pbmc14k_clustered.eset)) #>                trueLabel_full trueLabel projectID nUMI nFeature    pctMito #> CACTTTGACGCAAT CD14+ Monocyte  Monocyte   PBMC14k  764      354 0.01832461 #> GTTACGGAAACGAA CD14+ Monocyte  Monocyte   PBMC14k  956      442 0.01569038 #> CACTTATGAGTCGT CD14+ Monocyte  Monocyte   PBMC14k  629      323 0.02066773 #> GCATGTGATTCTGT CD14+ Monocyte  Monocyte   PBMC14k  875      427 0.02628571 #> TAGAATACGTATCG CD14+ Monocyte  Monocyte   PBMC14k 1060      445 0.03207547 #> CAAGAAGACCCTCA CD14+ Monocyte  Monocyte   PBMC14k  849      384 0.01531213 #>                pctSpikeIn         CellID   UMAP_1   UMAP_2 clusterID #> CACTTTGACGCAAT          0 CACTTTGACGCAAT 14.91650 13.04096         6 #> GTTACGGAAACGAA          0 GTTACGGAAACGAA 14.57031 10.27093         6 #> CACTTATGAGTCGT          0 CACTTATGAGTCGT 14.28869 13.61674         6 #> GCATGTGATTCTGT          0 GCATGTGATTCTGT 14.12546 13.36319         6 #> TAGAATACGTATCG          0 TAGAATACGTATCG 14.91227 11.19407         6 #> CAAGAAGACCCTCA          0 CAAGAAGACCCTCA 15.34154 12.25821         6 saveRDS(pbmc14k_clustered.eset, file = \"/your-path/PBMC14k/DATA/pbmc14k_clustered.eset\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"visulize-mica-output","dir":"Articles","previous_headings":"MI-based clustering analysis","what":"Visulize MICA output","title":"A quick tutorial to run scMINER","text":"scMINER provides function, MICAplot() easily visualize clustering results 2D plot, UMAP tSNE. can colored multiple variables, including cluster label, sample source, nUMI, nFeature, pctMito . visualize clustering results:  visualize true labels cell types:  visualize nUMI UMAP/t-SNE plot:  can also visualize nFeature pctMito pctSpikeIn:","code":"MICAplot(input_eset = pbmc14k_clustered.eset, color_by = \"clusterID\", X = \"UMAP_1\", Y = \"UMAP_2\", point.size = 0.1, fontsize.cluster_label = 6) MICAplot(input_eset = pbmc14k_clustered.eset, color_by = \"trueLabel\", X = \"UMAP_1\", Y = \"UMAP_2\", point.size = 0.1, fontsize.cluster_label = 4) MICAplot(input_eset = pbmc14k_clustered.eset, color_by = \"nUMI\", do.logTransform = TRUE, point.size = 0.1) #> The values in \"nUMI\" have been transformed by log2(value + 1). To turn transformation off, set do.logTransform = FALSE. MICAplot(input_eset = pbmc14k_clustered.eset, color_by = \"nFeature\", do.logTransform = TRUE, point.size = 0.1) #> The values in \"nFeature\" have been transformed by log2(value + 1). To turn transformation off, set do.logTransform = FALSE. MICAplot(input_eset = pbmc14k_clustered.eset, color_by = \"pctMito\", do.logTransform = FALSE, point.size = 0.1) MICAplot(input_eset = pbmc14k_clustered.eset, color_by = \"pctSpikeIn\", do.logTransform = FALSE, point.size = 0.1)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"cell-type-annotation","dir":"Articles","previous_headings":"","what":"Cell type annotation","title":"A quick tutorial to run scMINER","text":"Currently, two types strategies annotate clusters: supervised unsupervised. supervised methods use list known markers potential cell types curated existing studies /similar contexts. contrast, unsupervised methods usually based differentially expressed genes. scMINER provides several useful functions support types strategies.","code":""},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"supervised-cell-type-annotation","dir":"Articles","previous_headings":"Cell type annotation","what":"Supervised cell type annotation","title":"A quick tutorial to run scMINER","text":"showcase, know 7 cell types involved PBMC14k dataset, curated marker list existing PBMCs studies.","code":""},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"using-signature-scores","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation","what":"Using signature scores","title":"A quick tutorial to run scMINER","text":"Given marker list candidate cell types, scMINER can estimate signature score, mathematically weighted mean expression marker genes involved, candidate cell type across cell cluster. , need generate signature table three columns: signature_name: name cell types/signatures; signature_feature: markers genes/features corresponding cell type/signature; weight: weight corresponding maker/feature corresponding cell type/signature. ranges -1 1, positive negative markers supported. signature table, draw_bubbleplot() can estimate signature scores visualize using bubble plot:  bubble plot , color bubbles proportional mean signature scores, size bubbles proportional percentage cells higher signature score mean.","code":"## Signature table of PBMC14k dataset signature_table <- read.table(system.file(\"extdata/demo_pbmc14k/PBMC14k_signatureTable.txt\", package = \"scMINER\"), header = TRUE, sep = \"\\t\", quote = \"\", stringsAsFactors = FALSE) head(signature_table) #>   signature_name signature_feature weight #> 1       Monocyte              CD14      1 #> 2       Monocyte               LYZ      1 #> 3       Monocyte            S100A8      1 #> 4       Monocyte            S100A9      1 #> 5       Monocyte           S100A12      1 #> 6             NK            FCGR3A      1 ## Bubble plot of signature scores across clusters draw_bubbleplot(input_eset = pbmc14k_clustered.eset, signature_table = signature_table, group_by = \"clusterID\") #> 31 features of 7 signatures were found in the input eset and will be used in calculation."},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"using-individual-marker-genes","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation","what":"Using individual marker genes","title":"A quick tutorial to run scMINER","text":"scMINER also provides variety functions visualize selected features:","code":"## For the demonstration purposes, we picked two well known markers for each of the 7 known cell types, plus \"CD3D\" and \"CD4\". genes_of_interest <-c(\"CD14\", \"LYZ\", \"GZMB\", \"NKG7\", \"CD19\", \"MS4A1\", \"CD8A\", \"CD8B\", \"SELL\", \"CCR7\", \"IL2RA\", \"FOXP3\", \"IL7R\", \"S100A4\", \"CD3D\", \"CD4\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"feature-visualization-violin-plot","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation > Using individual marker genes","what":"feature visualization: violin plot","title":"A quick tutorial to run scMINER","text":"","code":"## Violin plot of marker genes across clusters feature_vlnplot(input_eset = pbmc14k_clustered.eset, features = genes_of_interest, group_by = \"clusterID\", ncol = 4)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"feature-visualization-box-plot","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation > Using individual marker genes","what":"feature visualization: box plot","title":"A quick tutorial to run scMINER","text":"","code":"## Box plot of marker genes across clusters feature_boxplot(input_eset = pbmc14k_clustered.eset, features = genes_of_interest, group_by = \"clusterID\", ncol = 4)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"feature-visualization-scatter-plot","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation > Using individual marker genes","what":"feature visualization: scatter plot","title":"A quick tutorial to run scMINER","text":"","code":"## UMAP scatter plot of marker genes feature_scatterplot(input_eset = pbmc14k_clustered.eset, features = genes_of_interest, ncol = 4, location_x = \"UMAP_1\", location_y =  \"UMAP_2\", point.size = 0.5, legend.key_height = 0.3, legend.key_width = 0.2, fontsize.legend_title = 8, fontsize.legend_text = 6, fontsize.axis_title = 8, legend.position = \"none\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"feature-visualization-bubble-plot","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation > Using individual marker genes","what":"feature visualization: bubble plot","title":"A quick tutorial to run scMINER","text":"","code":"## Bubble plot of marker genes across clusters feature_bubbleplot(input_eset = pbmc14k_clustered.eset, features = genes_of_interest, group_by = \"clusterID\", xlabel.angle = 45)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"feature-visualization-heatmap","dir":"Articles","previous_headings":"Cell type annotation > Supervised cell type annotation > Using individual marker genes","what":"feature visualization: heatmap","title":"A quick tutorial to run scMINER","text":"","code":"## Heatmap of marker genes across clusters feature_heatmap(input_eset = pbmc14k_clustered.eset, features = genes_of_interest, group_by = \"clusterID\", scale_method = \"none\", annotation_columns = c(\"trueLabel\"))"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"unsupervised-cell-type-annotation","dir":"Articles","previous_headings":"Cell type annotation","what":"Unsupervised cell type annotation","title":"A quick tutorial to run scMINER","text":"scMINER provides function, getDE(), perform differential expression analysis identify markers cluster. getDE() function supports three different methods perform differential expression analysis, limma, wilcoxon t.test. allows users define groups compare highly flexible way: brief introduction results getDE(): feature: feature name; g1_tag: vector clusters subgroups involved g1, fore-ground group; g0_tag: vector clusters subgroups involved g0, back-ground group; g1_avg: mean gene expression cells g1; g0_tag: mean gene expression cells g0; g1_pct: percentage cells expressing corresponding genes group 1; g0_pct: percentage cells expressing corresponding genes group 0; log2FC: log2Fold change gene expression g1 g0; Pval: P values g1-g0 comparison; FDR: FDR g1-g0 comparison; Zscore: Z score g1-g0 comparison, signed log2FC; scMINER also provides function, getTopFeatures(), easily extract group-specific markers differential expression result:","code":"## 1. To perform differential expression analysis in a 1-vs-rest manner for all groups de_res1 <- getDE(input_eset = pbmc14k_clustered.eset, group_by = \"clusterID\", use_method = \"limma\") #> 7 groups were found in group_by column [ clusterID ]. #> Since no group was specified, the differential analysis will be conducted among all groups in the group_by column [ clusterID ] in the 1-vs-rest manner. #>   1 / 7 : group 1 ( 1 ) vs the rest... #>   2505 cells were found for g1. #>   11100 cells were found for g0. #>   2 / 7 : group 1 ( 2 ) vs the rest... #>   2022 cells were found for g1. #>   11583 cells were found for g0. #>   3 / 7 : group 1 ( 3 ) vs the rest... #>   2014 cells were found for g1. #>   11591 cells were found for g0. #>   4 / 7 : group 1 ( 4 ) vs the rest... #>   1918 cells were found for g1. #>   11687 cells were found for g0. #>   5 / 7 : group 1 ( 5 ) vs the rest... #>   1912 cells were found for g1. #>   11693 cells were found for g0. #>   6 / 7 : group 1 ( 6 ) vs the rest... #>   1786 cells were found for g1. #>   11819 cells were found for g0. #>   7 / 7 : group 1 ( 7 ) vs the rest... #>   1448 cells were found for g1. #>   12157 cells were found for g0. head(de_res1) #>      feature g1_tag      g0_tag    g1_avg   g0_avg    g1_pct    g0_pct   log2FC #> 1251    CD3E      1 2,3,4,5,6,7  8.354660 3.874230 0.7920160 0.3819820 4.480430 #> 3820    LDHB      1 2,3,4,5,6,7  9.555670 5.614992 0.8806387 0.5458559 3.940678 #> 7765  TMEM66      1 2,3,4,5,6,7  8.604421 5.041570 0.8103792 0.5051351 3.562851 #> 1250    CD3D      1 2,3,4,5,6,7  7.281998 4.097082 0.6990020 0.3965766 3.184916 #> 1235    CD27      1 2,3,4,5,6,7  5.566280 2.428199 0.5481038 0.2482883 3.138081 #> 3992     LTB      1 2,3,4,5,6,7 10.436707 7.315803 0.9141717 0.6430631 3.120905 #>               Pval           FDR   Zscore #> 1251 2.225074e-308  0.000000e+00 37.53784 #> 3820 4.919041e-274 6.216262e-271 35.37012 #> 7765 1.509154e-228 9.535698e-226 32.27621 #> 1250 3.193659e-174 1.130044e-171 28.13981 #> 1235 7.997857e-219 4.716603e-216 31.57555 #> 3992 5.621459e-159 1.841756e-156 26.86509 ## 2. To perform differential expression analysis in a 1-vs-rest manner for one specific group de_res2 <- getDE(input_eset = pbmc14k_clustered.eset, group_by = \"clusterID\", g1 = c(\"1\"), use_method = \"limma\")  ## 3. To perform differential expression analysis in a rest-vs-1 manner for one specific group de_res3 <- getDE(input_eset = pbmc14k_clustered.eset, group_by = \"clusterID\", g0 = c(\"1\"), use_method = \"limma\")  ## 4. To perform differential expression analysis in a 1-vs-1 manner for any two groups de_res4 <- getDE(input_eset = pbmc14k_clustered.eset, group_by = \"clusterID\", g1 = c(\"1\", \"4\"), g0 = c(\"3\",\"5\"), use_method = \"limma\") cluster_markers <- getTopFeatures(input_table = de_res1, number = 10, group_by = \"g1_tag\", sort_by = \"log2FC\", sort_decreasing = TRUE) dim(cluster_markers) #> [1] 70 11 head(cluster_markers) #>      feature g1_tag      g0_tag    g1_avg   g0_avg    g1_pct    g0_pct   log2FC #> 1251    CD3E      1 2,3,4,5,6,7  8.354660 3.874230 0.7920160 0.3819820 4.480430 #> 3820    LDHB      1 2,3,4,5,6,7  9.555670 5.614992 0.8806387 0.5458559 3.940678 #> 7765  TMEM66      1 2,3,4,5,6,7  8.604421 5.041570 0.8103792 0.5051351 3.562851 #> 1250    CD3D      1 2,3,4,5,6,7  7.281998 4.097082 0.6990020 0.3965766 3.184916 #> 1235    CD27      1 2,3,4,5,6,7  5.566280 2.428199 0.5481038 0.2482883 3.138081 #> 3992     LTB      1 2,3,4,5,6,7 10.436707 7.315803 0.9141717 0.6430631 3.120905 #>               Pval           FDR   Zscore #> 1251 2.225074e-308  0.000000e+00 37.53784 #> 3820 4.919041e-274 6.216262e-271 35.37012 #> 7765 1.509154e-228 9.535698e-226 32.27621 #> 1250 3.193659e-174 1.130044e-171 28.13981 #> 1235 7.997857e-219 4.716603e-216 31.57555 #> 3992 5.621459e-159 1.841756e-156 26.86509"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"add-cell-type-annotation-to-sparseeset-object","dir":"Articles","previous_headings":"Cell type annotation","what":"Add cell type annotation to SparseEset object","title":"A quick tutorial to run scMINER","text":"Based supervised unsupervised methods, annotated cell types cluster. add cell type annotation information SparseEset object: draw_barplot() function can visualize cell composition self-defined groups. can use show purity MICA clusters:  Don’t forget save SparseEset object cell type annotation added.","code":"## Add cell type annotation to SparseEset object pbmc14k_log2cpm_annotated.eset <- pbmc14k_clustered.eset celltype_map <- c(`1`=\"CD4TN\", `2`=\"CD4TCM\", `3`=\"CD8TN\", `4`=\"NK\", `5`=\"B\", `6`=\"Monocyte\", `7`=\"CD4Treg\") pbmc14k_log2cpm_annotated.eset$cell_type <- as.character(celltype_map[pbmc14k_log2cpm_annotated.eset$clusterID]) head(pData(pbmc14k_log2cpm_annotated.eset)) #>                trueLabel_full trueLabel projectID nUMI nFeature    pctMito #> CACTTTGACGCAAT CD14+ Monocyte  Monocyte   PBMC14k  764      354 0.01832461 #> GTTACGGAAACGAA CD14+ Monocyte  Monocyte   PBMC14k  956      442 0.01569038 #> CACTTATGAGTCGT CD14+ Monocyte  Monocyte   PBMC14k  629      323 0.02066773 #> GCATGTGATTCTGT CD14+ Monocyte  Monocyte   PBMC14k  875      427 0.02628571 #> TAGAATACGTATCG CD14+ Monocyte  Monocyte   PBMC14k 1060      445 0.03207547 #> CAAGAAGACCCTCA CD14+ Monocyte  Monocyte   PBMC14k  849      384 0.01531213 #>                pctSpikeIn         CellID   UMAP_1   UMAP_2 clusterID cell_type #> CACTTTGACGCAAT          0 CACTTTGACGCAAT 14.91650 13.04096         6  Monocyte #> GTTACGGAAACGAA          0 GTTACGGAAACGAA 14.57031 10.27093         6  Monocyte #> CACTTATGAGTCGT          0 CACTTATGAGTCGT 14.28869 13.61674         6  Monocyte #> GCATGTGATTCTGT          0 GCATGTGATTCTGT 14.12546 13.36319         6  Monocyte #> TAGAATACGTATCG          0 TAGAATACGTATCG 14.91227 11.19407         6  Monocyte #> CAAGAAGACCCTCA          0 CAAGAAGACCCTCA 15.34154 12.25821         6  Monocyte ## Show the composition of true labels of cell types among the annotated cell types draw_barplot(input_eset = pbmc14k_log2cpm_annotated.eset, group_by = \"cell_type\", color_by = \"trueLabel_full\", xlabel.angle = 45) saveRDS(pbmc14k_log2cpm_annotated.eset, file = \"/your-path/PBMC14k/DATA/pbmc14k_log2cpm_annotated.eset\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"network-inference","dir":"Articles","previous_headings":"","what":"Network inference","title":"A quick tutorial to run scMINER","text":"scMINER constructs cellular networks using SJARACNe, scalable software tool gene network reverse engineering big data. Similar MICA, SJARACNe also component scMINER framework, can work seamlessly scMINER R package SparseEset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"generate-sjaracne-inputs","dir":"Articles","previous_headings":"Network inference","what":"Generate SJARACNe inputs","title":"A quick tutorial to run scMINER","text":"Network inference performed groups homogeneous cells. Usually ’s cluster- cell type-specific basis. showcase, know true labels cell types like use grouping: IMPORTANT NOTE: illegal characters path group labels may cause issues subsequent analysis. avoid , scMINER accepts letters(-Za-z), numbers(0-9), underscores(’_‘) periods(’.’). big datasets, generateSJARACNeInput() provides argument, downSample_N, allow sample size group. default value downSample_N 1,000, group >= 1,000 cells -sampled 1,000. generateSJARACNeInput() creates folder groups availble trueLabel column, generates standard input files inside : “.exp.txt” file: tab-separated genes/transcripts/proteins cells/samples expression matrix first two columns ID symbol. “TF” folder containing “.tf.txt” file: list significant gene/transcript/protein IDs TF drivers. “SIG” folder containing “.sig.txt” file: list significant gene/transcript/protein IDs SIG drivers. bash script (runSJARACNe.sh) run SJARACNe. modification needed run . json file (config_cwlexec.json) containing parameters run SJARACNe.","code":"## Columns with any illegal characters can not be used for groupping generateSJARACNeInput(input_eset = pbmc14k_log2cpm_annotated.eset, group_name = \"trueLabel\", sjaracne_dir = \"/your-path/PBMC14k/SJARACNe\", species_type = \"hg\", driver_type = \"TF_SIG\", downSample_N = NULL)"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"run-sjaracne","dir":"Articles","previous_headings":"Network inference","what":"Run SJARACNe","title":"A quick tutorial to run scMINER","text":"mentioned , generateSJARACNeInput() generates runSJARACNe.sh file folder group. need make modifications can run : remove unneeded lines: usually 4 lines file: lines starting sjaracne lsf command lines run IBM LSF cluster, starting sjaracne local command lines running local machine (Linux/OSX). Please select lines based situation remove others. modify key parameters: -n: number bootstrap networks generate. Default: 100. -pc: p value threshold select edges building consensus network. Default: e-2 single-cell data, e-3 meta-cell data, e-5 bulk sample data. Please use sjaracne lsf -h sjaracne local -h check details arguments available SJARACNe. another file, config_cwlexec.json, available folder. contains information (e.g. memory request step SJARACNe run) used LSF job submission. file needed LSF runs default values works well cases. running SJARACNe big dataset, may need request memory . case, use LSF run SJARACNe: manually created folder named “bt100_pc001” TF SIG folders group, save networks generated 100 bootstraps (-n 100) 0.01 consensus p value (-pc 0.01). run SJARACNe local machine:","code":"## Let's use B cell as an example # For TF sjaracne lsf -e /your-path/PBMC14k/SJARACNe/B/B.8572_1902.exp.txt -g /your-path/PBMC14k/SJARACNe/B/TF/B.835_1902.tf.txt -o /your-path/PBMC14k/SJARACNe/B/TF/bt100_pc001 -n 100 -pc 0.01 -j /your-path/PBMC14k/SJARACNe/B/config_cwlexec.json  # For SIG sjaracne lsf -e /your-path/PBMC14k/SJARACNe/B/B.8572_1902.exp.txt -g /your-path/PBMC14k/SJARACNe/B/SIG/B.4148_1902.sig.txt -o /your-path/PBMC14k/SJARACNe/B/SIG/bt100_pc001 -n 100 -pc 0.01 -j /work-path/PBMC14k/SJARACNe/B/config_cwlexec.json ## Let's use B cell as an example # For TF sjaracne local -e /your-path/PBMC14k/SJARACNe/B/B.8572_1902.exp.txt -g /your-path/PBMC14k/SJARACNe/B/TF/B.835_1902.tf.txt -o /your-path/PBMC14k/SJARACNe/B/TF/bt100_pc001 -n 100 -pc 0.01  # For SIG sjaracne local -e /your-path/PBMC14k/SJARACNe/B/B.8572_1902.exp.txt -g /your-path/PBMC14k/SJARACNe/B/SIG/B.4148_1902.sig.txt -o /your-path/PBMC14k/SJARACNe/B/SIG/bt100_pc001 -n 100 -pc 0.01"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"quality-control-of-networks","dir":"Articles","previous_headings":"Network inference","what":"Quality control of networks","title":"A quick tutorial to run scMINER","text":"core output SJARACNe network file named consensus_network_ncol_.txt. shown , contains 9 columns: source: ID source gene, can gene symbol; target: ID target gene, can gene symbol; source.symbol: symbol source gene; target.symbol: symbol target gene; MI: mutual information source-gene pair; pearson: Pearson correlation coefficient, [-1,1] pearson: Spearman correlation coefficient, [-1,1] slope: slop regression line, returned stats.linregression() p.value: p-value hypothesis test whose null hypothesis slope zero, using Wald Test t-distribution test statistic help assess quality SJARACNe networks, scMINER provides function drawNetworkQC(): drawNetworkQC() returns summary table key statistics SJARACNe networks. Empirically, network 50-300 target size good.","code":"network_format <- read.table(system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                              header = T, sep = \"\\t\", quote = \"\", stringsAsFactors = F) head(network_format) #>   source     target source.symbol target.symbol     MI pearson spearman   slope #> 1   AATF      ACBD3          AATF         ACBD3 0.0509 -0.0310  -0.0311 -0.0193 #> 2   AATF       ADD3          AATF          ADD3 0.0486  0.0228   0.0258  0.0307 #> 3   AATF        AES          AATF           AES 0.0511  0.0311   0.0289  0.0668 #> 4   AATF     AKR7A2          AATF        AKR7A2 0.0498  0.0319   0.0366  0.0421 #> 5   AATF AL928768.3          AATF    AL928768.3 0.0447  0.0247   0.0293  0.0335 #> 6   AATF       ALG8          AATF          ALG8 0.0479  0.0358   0.0373  0.0234 #>   p.value #> 1  0.1761 #> 2  0.3204 #> 3  0.1756 #> 4  0.1646 #> 5  0.2815 #> 6  0.1183 ## Network QC on single network file network_stats <- drawNetworkQC(network_file = system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"), generate_html = FALSE)  ## Network QC on all network files under a directory network_stats <- drawNetworkQC(sjaracne_dir = \"/your-path/PBMC14K/SJARACNe\", generate_html = FALSE) # Set `generate_html = TRUE` to generate html-format QC report for each network file ## The network QC statistics table is saved separately, for demonstration purposes. network_stats <- readRDS(system.file(\"extdata/demo_pbmc14k/SJARACNe/network_stats.rds\", package = \"scMINER\")) head(network_stats) #>              network_tag network_node network_edge driver_count targetSize_mean #> 1      B.SIG.bt100_pc001         8572       391889         4148        94.47662 #> 2       B.TF.bt100_pc001         8572        95341          835       114.18084 #> 3 CD4TCM.SIG.bt100_pc001         8660       382153         4209        90.79425 #> 4  CD4TCM.TF.bt100_pc001         8660        94319          838       112.55251 #> 5  CD4TN.SIG.bt100_pc001         8612       401658         4180        96.09043 #> 6   CD4TN.TF.bt100_pc001         8612        95152          831       114.50301 #>   targetSize_median targetSize_minimum targetSize_maximum #> 1              94.0                 33                396 #> 2              96.0                 64                913 #> 3              91.0                 31                281 #> 4              95.5                 60                689 #> 5              95.0                 43                303 #> 6              99.0                 64                743 #>                                                                                                                                                                                               network_path #> 1      /Volumes/projects/scRNASeq/yu3grp/scMINER/NG_Revision/QPan/scminer_R/Datasets/PBMC14K/SJARACNe/B/SIG/bt100_pc001/sjaracne_workflow-df798096-8dee-4baf-8f70-891c689dc769/consensus_network_ncol_.txt #> 2       /Volumes/projects/scRNASeq/yu3grp/scMINER/NG_Revision/QPan/scminer_R/Datasets/PBMC14K/SJARACNe/B/TF/bt100_pc001/sjaracne_workflow-fb2a69b9-f98e-47ff-87a0-6d538822fc6e/consensus_network_ncol_.txt #> 3 /Volumes/projects/scRNASeq/yu3grp/scMINER/NG_Revision/QPan/scminer_R/Datasets/PBMC14K/SJARACNe/CD4TCM/SIG/bt100_pc001/sjaracne_workflow-424f1068-13d1-4f0e-9c26-56acd9a2027c/consensus_network_ncol_.txt #> 4  /Volumes/projects/scRNASeq/yu3grp/scMINER/NG_Revision/QPan/scminer_R/Datasets/PBMC14K/SJARACNe/CD4TCM/TF/bt100_pc001/sjaracne_workflow-52b3cdf5-5914-4c8c-a77a-05f17c755d83/consensus_network_ncol_.txt #> 5  /Volumes/projects/scRNASeq/yu3grp/scMINER/NG_Revision/QPan/scminer_R/Datasets/PBMC14K/SJARACNe/CD4TN/SIG/bt100_pc001/sjaracne_workflow-7b5bb68e-1de5-4d0e-80ec-8d8aa037866f/consensus_network_ncol_.txt #> 6   /Volumes/projects/scRNASeq/yu3grp/scMINER/NG_Revision/QPan/scminer_R/Datasets/PBMC14K/SJARACNe/CD4TN/TF/bt100_pc001/sjaracne_workflow-89716541-eb53-435c-8a45-bab63d6b5198/consensus_network_ncol_.txt"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"activity-related-analysis","dir":"Articles","previous_headings":"","what":"Activity-related analysis","title":"A quick tutorial to run scMINER","text":"many signaling proteins (e.g., kinases), transcription factors, factors crucial drivers phenotypes. factors genetically epigenetically altered, differentially expressed mRNA protein level. Instead, altered post-translational modifications, therefore termed hidden drivers. gene activity-based analysis proved effective way expose hidden driver. scMINER aims expose cell type-specific hidden drivers various biological activities provides useful functions effortlessly calculate driver activities, identify hidden drivers visualize multiple ways.","code":""},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"calculate-driver-activities","dir":"Articles","previous_headings":"Activity-related analysis","what":"Calculate driver activities","title":"A quick tutorial to run scMINER","text":"driver activity estimation one important features scMINER. Mathematically, activity one driver type mean expressions targets. biologically, activity can interpreted measure describes actively driver functions, like enzymes digesting subtracts, kinase activating downstream genes. Given gene expression profiles networks, scMINER can estimate activities predefined drivers, including transcription factors (TFs) also signaling genes (SIGs). scMINER provides two functions, getActivity_individual() getActivity_inBatch(), calculate driver activities individually batch: getActivity_individual() designed calculate driver activities individual group. takes SparseEset network files group--calculate inputs: getActivity_inBatch() designed calculate driver activities batch. Instead networks files, takes directory contains network files multiples groups automatically retrieve activity estimation: functions return eSet object driver activities. full phenoData part featureData activity eSet object inherited SparseEset object. Don’t forget save activity eSet object.","code":"## Let's use B cell as an example activity_B.eset <- getActivity_individual(input_eset = pbmc14k_log2cpm_annotated.eset[, pData(pbmc14k_log2cpm_annotated.eset)$trueLabel == \"B\"],                                           network_file.tf = system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                                           network_file.sig = system.file(\"extdata/demo_pbmc14k/SJARACNe/B/SIG/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                                           driver_type = \"TF_SIG\") ## let's use B cell as an example activity.eset <- getActivity_inBatch(input_eset = pbmc14k_log2cpm_annotated.eset,                                      sjaracne_dir = system.file(\"extdata/demo_pbmc14k/SJARACNe\", package = \"scMINER\"),                                      group_name = \"trueLabel\", driver_type = \"TF_SIG\", activity_method = \"mean\", do.z_normalization = TRUE) #> 7 groups were found in trueLabel ... #> Checking network files for each group ... #>  Group 1 / 7 : Monocyte ... #>      TF network check passed! #>      SIG network check passed! #>  Group 2 / 7 : B ... #>      TF network check passed! #>      SIG network check passed! #>  Group 3 / 7 : CD4Treg ... #>      TF network check passed! #>      SIG network check passed! #>  Group 4 / 7 : CD4TN ... #>      TF network check passed! #>      SIG network check passed! #>  Group 5 / 7 : CD4TCM ... #>      TF network check passed! #>      SIG network check passed! #>  Group 6 / 7 : NK ... #>      TF network check passed! #>      SIG network check passed! #>  Group 7 / 7 : CD8TN ... #>      TF network check passed! #>      SIG network check passed! #> Calculating activity for each group ... #>  Group 1 / 7 : Monocyte ... #>  Activity calculation is completed successfully! #>  Group 2 / 7 : B ... #>  Activity calculation is completed successfully! #>  Group 3 / 7 : CD4Treg ... #>  Activity calculation is completed successfully! #>  Group 4 / 7 : CD4TN ... #>  Activity calculation is completed successfully! #>  Group 5 / 7 : CD4TCM ... #>  Activity calculation is completed successfully! #>  Group 6 / 7 : NK ... #>  Activity calculation is completed successfully! #>  Group 7 / 7 : CD8TN ... #>  Activity calculation is completed successfully! #> NAs were found in the activity matrix and have been replaced by the minimum value:  -0.3968794 . ## Save activity eSet object saveRDS(activity.eset, file = \"/your-path/PBMC14k/DATA/pbmc14k_activity.eset\")"},{"path":"https://jyyulab.github.io/scMINER/articles/quick_tutorial.html","id":"differential-activity-analysis","dir":"Articles","previous_headings":"Activity-related analysis","what":"Differential activity analysis","title":"A quick tutorial to run scMINER","text":"scMINER provides function, getDA(), perform differential activity analysis identify cell type-specific drivers. Similar getDE(), getDA() also allows compare different groups highly flexible way: getTopFeatures() function can also used effortlessly highlight cell type-specific drivers differential activity analysis results:","code":"## 1. To perform differential expression analysis in a 1-vs-rest manner for all groups da_res1 <- getDA(input_eset = activity.eset, group_by = \"cell_type\", use_method = \"t.test\") #> 7 groups were found in group_by column [ cell_type ]. #> Since no group was specified, the differential analysis will be conducted among all groups in the group_by column [ cell_type ] in the 1-vs-rest manner. #>   1 / 7 : group 1 ( B ) vs the rest... #>   1912 cells were found for g1. #>   11693 cells were found for g0. #>   2 / 7 : group 1 ( CD4TCM ) vs the rest... #>   2022 cells were found for g1. #>   11583 cells were found for g0. #>   3 / 7 : group 1 ( CD4TN ) vs the rest... #>   2505 cells were found for g1. #>   11100 cells were found for g0. #>   4 / 7 : group 1 ( CD4Treg ) vs the rest... #>   1448 cells were found for g1. #>   12157 cells were found for g0. #>   5 / 7 : group 1 ( CD8TN ) vs the rest... #>   2014 cells were found for g1. #>   11591 cells were found for g0. #>   6 / 7 : group 1 ( Monocyte ) vs the rest... #>   1786 cells were found for g1. #>   11819 cells were found for g0. #>   7 / 7 : group 1 ( NK ) vs the rest... #>   1918 cells were found for g1. #>   11687 cells were found for g0. head(da_res1) #>       feature g1_tag                                 g0_tag       g1_avg #> 4   AASDH_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.008071658 #> 6    AATF_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.051767485 #> 12  ABCB8_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.077615607 #> 8   ABCA2_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.081643603 #> 10  ABCB1_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.134357577 #> 3  AARSD1_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.126010447 #>        g0_avg     g1_pct     g0_pct       log2FC          Pval           FDR #> 4  -0.1025141 0.43043933 0.13991277  0.094442475 2.225074e-308  0.000000e+00 #> 6  -0.1084165 0.21652720 0.08757376  0.056649005 3.918924e-189 5.878386e-189 #> 12 -0.1094585 0.35251046 0.14153767  0.031842866  3.623209e-12  3.952592e-12 #> 8  -0.1101867 0.10198745 0.15676045  0.028543082  1.914570e-58  2.418404e-58 #> 10 -0.1559384 0.04393305 0.06114770  0.021580866  8.079661e-27  9.233898e-27 #> 3  -0.1225746 0.04184100 0.08192936 -0.003435892  4.213744e-02  4.213744e-02 #>      Zscore #> 4  37.53784 #> 6  29.33316 #> 12  6.95115 #> 8  16.11775 #> 10 10.72137 #> 3  -2.03216 ## 2. To perform differential expression analysis in a 1-vs-rest manner for one specific group da_res2 <- getDA(input_eset = activity.eset, group_by = \"cell_type\", g1 = c(\"B\"), use_method = \"t.test\")  ## 3. To perform differential expression analysis in a rest-vs-1 manner for one specific group da_res3 <- getDA(input_eset = activity.eset, group_by = \"cell_type\", g0 = c(\"B\"), use_method = \"t.test\")  ## 4. To perform differential expression analysis in a 1-vs-1 manner for any two groups da_res4 <- getDA(input_eset = activity.eset, group_by = \"cell_type\", g1 = c(\"CD4Treg\"), g0 = c(\"CD4TCM\"), use_method = \"t.test\") top_drivers <- getTopFeatures(input_table = da_res1, number = 10, group_by = \"g1_tag\", sort_by = \"log2FC\", sort_decreasing = TRUE) dim(top_drivers) #> [1] 70 11 head(top_drivers) #>       feature g1_tag                                 g0_tag       g1_avg #> 4   AASDH_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.008071658 #> 6    AATF_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.051767485 #> 12  ABCB8_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.077615607 #> 8   ABCA2_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.081643603 #> 10  ABCB1_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.134357577 #> 3  AARSD1_SIG      B CD4TCM,CD4TN,CD4Treg,CD8TN,Monocyte,NK -0.126010447 #>        g0_avg     g1_pct     g0_pct       log2FC          Pval           FDR #> 4  -0.1025141 0.43043933 0.13991277  0.094442475 2.225074e-308  0.000000e+00 #> 6  -0.1084165 0.21652720 0.08757376  0.056649005 3.918924e-189 5.878386e-189 #> 12 -0.1094585 0.35251046 0.14153767  0.031842866  3.623209e-12  3.952592e-12 #> 8  -0.1101867 0.10198745 0.15676045  0.028543082  1.914570e-58  2.418404e-58 #> 10 -0.1559384 0.04393305 0.06114770  0.021580866  8.079661e-27  9.233898e-27 #> 3  -0.1225746 0.04184100 0.08192936 -0.003435892  4.213744e-02  4.213744e-02 #>      Zscore #> 4  37.53784 #> 6  29.33316 #> 12  6.95115 #> 8  16.11775 #> 10 10.72137 #> 3  -2.03216 sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-05-28 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package      * version date (UTC) lib source #>  anndata      * 0.8.0   2025-05-27 [1] RSPM #>  assertthat     0.2.1   2019-03-21 [1] RSPM #>  Biobase      * 2.68.0  2025-04-15 [1] Bioconduc~ #>  BiocGenerics * 0.54.0  2025-04-15 [1] Bioconduc~ #>  bit            4.6.0   2025-03-06 [1] RSPM #>  bit64          4.6.0-1 2025-01-16 [1] RSPM #>  bslib          0.9.0   2025-01-30 [1] RSPM #>  cachem         1.1.0   2024-05-16 [1] RSPM #>  cli            3.6.5   2025-04-23 [1] RSPM #>  desc           1.4.3   2023-12-10 [1] RSPM #>  digest         0.6.37  2024-08-19 [1] RSPM #>  dplyr        * 1.1.4   2023-11-17 [1] RSPM #>  evaluate       1.0.3   2025-01-10 [1] RSPM #>  farver         2.1.2   2024-05-13 [1] RSPM #>  fastmap        1.2.0   2024-05-15 [1] RSPM #>  fs             1.6.6   2025-04-12 [1] RSPM #>  generics     * 0.1.4   2025-05-09 [1] RSPM #>  ggplot2      * 3.5.2   2025-04-09 [1] RSPM #>  glue           1.8.0   2024-09-30 [1] RSPM #>  gridExtra      2.3     2017-09-09 [1] RSPM #>  gtable         0.3.6   2024-10-25 [1] RSPM #>  hdf5r        * 1.3.12  2025-01-20 [1] RSPM #>  htmltools      0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets    1.6.4   2023-12-06 [1] RSPM #>  igraph         2.1.4   2025-01-23 [1] RSPM #>  jquerylib      0.1.4   2021-04-26 [1] RSPM #>  jsonlite       2.0.0   2025-03-27 [1] RSPM #>  knitr          1.50    2025-03-16 [1] RSPM #>  labeling       0.4.3   2023-08-29 [1] RSPM #>  lattice        0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle      1.0.4   2023-11-07 [1] RSPM #>  limma          3.64.1  2025-05-25 [1] Bioconduc~ #>  magrittr       2.0.3   2022-03-30 [1] RSPM #>  Matrix       * 1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  pheatmap       1.0.12  2019-01-04 [1] RSPM #>  pillar         1.10.2  2025-04-05 [1] RSPM #>  pkgconfig      2.0.3   2019-09-22 [1] RSPM #>  pkgdown        2.1.3   2025-05-25 [1] any (@2.1.3) #>  plyr           1.8.9   2023-10-02 [1] RSPM #>  png            0.1-8   2022-11-29 [1] RSPM #>  R6             2.6.1   2025-02-15 [1] RSPM #>  ragg           1.4.0   2025-04-10 [1] RSPM #>  RColorBrewer   1.1-3   2022-04-03 [1] RSPM #>  Rcpp           1.0.14  2025-01-12 [1] RSPM #>  reshape2       1.4.4   2020-04-09 [1] RSPM #>  reticulate     1.42.0  2025-03-25 [1] RSPM #>  rlang          1.1.6   2025-04-11 [1] RSPM #>  rmarkdown      2.29    2024-11-04 [1] RSPM #>  sass           0.4.10  2025-04-11 [1] RSPM #>  scales         1.4.0   2025-04-24 [1] RSPM #>  scMINER      * 1.1.0   2025-05-28 [1] local #>  sessioninfo    1.2.3   2025-02-05 [1] RSPM #>  statmod        1.5.0   2023-01-06 [1] RSPM #>  stringi        1.8.7   2025-03-27 [1] RSPM #>  stringr        1.5.1   2023-11-14 [1] RSPM #>  systemfonts    1.2.3   2025-04-30 [1] RSPM #>  textshaping    1.0.1   2025-05-01 [1] RSPM #>  tibble         3.2.1   2023-03-20 [1] RSPM #>  tidyselect     1.2.1   2024-03-11 [1] RSPM #>  vctrs          0.6.5   2023-12-01 [1] RSPM #>  withr          3.0.2   2024-10-28 [1] RSPM #>  xfun           0.52    2025-04-02 [1] RSPM #>  yaml           2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://jyyulab.github.io/scMINER/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Qingfei Pan. Author, maintainer. Jiayu Zhou. Author. Liang Ding. Author. Hao Shi. Author. Xinran Dong. Author. Yu Lab @ St Jude Children's Research Hospital. Funder.","code":""},{"path":"https://jyyulab.github.io/scMINER/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pan Q, Zhou J, Ding L, Shi H, Dong X (2025). scMINER: Single-cell Mutual Information-based Network Enginerring Ranger. R package version 1.1.0, https://jyyulab.github.io/scMINER/.","code":"@Manual{,   title = {scMINER: Single-cell Mutual Information-based Network Enginerring Ranger},   author = {Qingfei Pan and Jiayu Zhou and Liang Ding and Hao Shi and Xinran Dong},   year = {2025},   note = {R package version 1.1.0},   url = {https://jyyulab.github.io/scMINER/}, }"},{"path":"https://jyyulab.github.io/scMINER/index.html","id":"section","dir":"","previous_headings":"","what":"Single-cell Mutual Information-based Network Enginerring Ranger","title":"Single-cell Mutual Information-based Network Enginerring Ranger","text":"scMINER (single-cell Mutual Information-based Network Engineering Ranger) mutual information-based framework single cell RNA-seq data analysis. includes following key functions: Mutual information-based clustering: scMINER measures cell-cell similarities full feature-derived mutual information. can catch linear non-linear correlations performs better cell clustering, especially close states. Gene activity estimation: scMINER rewires cell-type specific gene networks solely scRNA-seq data, estimates gene activities transcription factors (TFs) also signaling genes (SIGs). gene activity-based analysis can expose main regulators various biological activities, like cellular linage differentiation tissue specificity. SparseEset-centered full-feature tool: scMINER provides wide range functions data intake, quality control filtration, MI-based clustering, network inference, gene activity estimation, cell type annotation, differential expression/activity analysis, data visualization sharing. functions developed object-oriented manner SparseEset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/index.html","id":"installation","dir":"","previous_headings":"","what":"Single-cell Mutual Information-based Network Enginerring Ranger","title":"Single-cell Mutual Information-based Network Enginerring Ranger","text":"scMINER framework mainly developed R advantages statistical analysis data visualization. also includes two components, MICA SJARACNe, developed Python take strengths calculation speed memory consumption, since mutual information estimation large-scale scRNA-seq data usually compute-intensive. Please install three software full access scMINER framework.","code":""},{"path":"https://jyyulab.github.io/scMINER/index.html","id":"install-scminer-r-package","dir":"","previous_headings":"","what":"Install scMINER R package","title":"Single-cell Mutual Information-based Network Enginerring Ranger","text":"scMINER R package requires R 4.2.3 newer, can installed GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jyyulab/scMINER\")"},{"path":"https://jyyulab.github.io/scMINER/index.html","id":"install-mica-and-sjaracne","dir":"","previous_headings":"","what":"Install MICA and SJARACNe","title":"Single-cell Mutual Information-based Network Enginerring Ranger","text":"recommended method install MICA SJARACNe use conda dependency manager:","code":"## setup conda env conda create -n scminer python=3.9.2                # Create a python virtual environment source activate scminer                             # Activate the virtual environment  ## install MICA git clone https://github.com/jyyulab/MICA           # Clone the MICA repo cd MICA                                             # Switch to the MICA root directory pip install .                                       # Install MICA and its dependencies mica -h                                             # Check if MICA works  ## install SJARACNE cd ..                                               # Switch to conda env folder git clone https://github.com/jyyulab/SJARACNe.git   # Clone the SJARACNe repo cd SJARACNe                                         # Switch to the MICA root directory python setup.py build                               # Build SJARACNe binary python setup.py install                             # Build SJARACNe binary sjaracne -h                                         # Check if SJARACNe works"},{"path":"https://jyyulab.github.io/scMINER/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Single-cell Mutual Information-based Network Enginerring Ranger","text":"Read documentation detailed installation instruction guided analysis. ’d like contribute, please open issue pull request github repository.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/MICAplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a scatter plot showing the coordinates and cluster id of each cell — MICAplot","title":"Draw a scatter plot showing the coordinates and cluster id of each cell — MICAplot","text":"function used visualize clustering results generated MICA.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/MICAplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a scatter plot showing the coordinates and cluster id of each cell — MICAplot","text":"","code":"MICAplot(   input_eset,   color_by = \"clusterID\",   colors = NULL,   do.logTransform = TRUE,   X = \"UMAP_1\",   Y = \"UMAP_2\",   point.size = 0.3,   point.alpha = 1,   name.plot_title = NULL,   fontsize.plot_table = 20,   show.cluster_label = TRUE,   fontsize.cluster_label = 12,   legend.position = \"right\",   fontsize.legend_title = 10,   fontsize.legend_text = 8,   fontsize.axis_title = 10,   fontsize.axis_text = 8 )"},{"path":"https://jyyulab.github.io/scMINER/reference/MICAplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a scatter plot showing the coordinates and cluster id of each cell — MICAplot","text":"input_eset sparse eset object color_by Factor, character numeric, name column MICA cluster labels. Default: \"clusterID\". colors character vector NULL, colors MICA cluster labels. length vector number groups color_by column. NULL, ggplot default colors use. Default: NULL. .logTransform Logical, whether log2(value + 1) transformation. valid color_by numeric Default: TRUE. X, Y Character, name columns x-axis y-axis coordinates. Default: \"UMAP_1\", \"UMAP_2\". point.size Numeric, size points. Default: 0.3. point.alpha Numeric, transparency points, ranging 0 (transparent) 1 (less transparent). Default: 1. name.plot_title Character NULL, title plot. Default: NULL. fontsize.plot_table Numeric, font size title. Default: 20. show.cluster_label Logical, whether show labels plot. Ignored color_by numeric. Default: TRUE. fontsize.cluster_label Numeric, font size labels. Ignored color_by numeric. Default: 12. legend.position Character, position legend: \"right\", \"left\", \"top\", \"bottom\" \"none\". Default: \"right\". fontsize.legend_title Integer, font size legend title. Default: 10. fontsize.legend_text Integer, font size legend text. Default: 8. fontsize.axis_title Integer, font size axis title. Default: 10. fontsize.axis_text Integer, font size axis text. Default: 8.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/MICAplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a scatter plot showing the coordinates and cluster id of each cell — MICAplot","text":"UMAP T-SNE plot. also print plot screen.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/MICAplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a scatter plot showing the coordinates and cluster id of each cell — MICAplot","text":"","code":"data(pbmc14k_expression.eset) ## 1. color-coded by factor or character variable p1 <- MICAplot(input_eset = pbmc14k_expression.eset,                color_by = \"clusterID\",                X = \"UMAP_1\", Y = \"UMAP_2\",                point.size = 0.1,                fontsize.cluster_label = 6)  ## 2. color-coded by numeric variable p2 <- MICAplot(input_eset = pbmc14k_expression.eset,                color_by = \"nUMI\",                do.logTransform = TRUE,                point.size = 0.1) #> The values in \"nUMI\" have been transformed by log2(value + 1). To turn transformation off, set do.logTransform = FALSE."},{"path":"https://jyyulab.github.io/scMINER/reference/SparseExpressionSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseExpressionSet — SparseExpressionSet-class","title":"SparseExpressionSet — SparseExpressionSet-class","text":"Define class: SparseExpressionSet","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/addMICAoutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the MICA output (cluster labels and UMAP/tSNE coordinates) to sparse eset object — addMICAoutput","title":"Add the MICA output (cluster labels and UMAP/tSNE coordinates) to sparse eset object — addMICAoutput","text":"function used add clustering results MICA sparse eset object. Two types resluts added phenoData slot sparse eset object: cluster ID cell dimension reduction coordinates cell, either UMAP ot tSNE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/addMICAoutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the MICA output (cluster labels and UMAP/tSNE coordinates) to sparse eset object — addMICAoutput","text":"","code":"addMICAoutput(input_eset, mica_output_file, visual_method = \"umap\")"},{"path":"https://jyyulab.github.io/scMINER/reference/addMICAoutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the MICA output (cluster labels and UMAP/tSNE coordinates) to sparse eset object — addMICAoutput","text":"input_eset sparse eset object add MICA output mica_output_file .txt file generated MICA. includes 4 columns: \"ID\" (Cell ID), \"X\" (UMAP_1 tSNE_1), \"Y\" (UMAP_2 tSNE_2), \"label\" (ClusterID) visual_method Character, method used visualizing clustering results: umap (default) tsne.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/addMICAoutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the MICA output (cluster labels and UMAP/tSNE coordinates) to sparse eset object — addMICAoutput","text":"sparse eset object clustering results added.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/addMICAoutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the MICA output (cluster labels and UMAP/tSNE coordinates) to sparse eset object — addMICAoutput","text":"","code":"data(pbmc14k_expression.eset) pbmc14k_log2cpm.eset <- addMICAoutput(pbmc14k_expression.eset,                                       mica_output_file = system.file(\"extdata/demo_pbmc14k/MICA/clustering_UMAP_euclidean_20_2.05_3500.txt\", package = \"scMINER\"),                                       visual_method = \"umap\")"},{"path":"https://jyyulab.github.io/scMINER/reference/cal_Activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate driver activities from gene expression matrix and networks — cal_Activity","title":"Calculate driver activities from gene expression matrix and networks — cal_Activity","text":"function used calculate activities gene expression matrix networks. internal function cal_Activity(), getActivity_individual(), getActivity_inBatch().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/cal_Activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate driver activities from gene expression matrix and networks — cal_Activity","text":"","code":"cal_Activity(   target_list = NULL,   cal_mat = NULL,   activity_method = \"mean\",   do.std = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/cal_Activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate driver activities from gene expression matrix and networks — cal_Activity","text":"target_list list source genes returned get_net2target_list(), source gene, value data frame \"target\", \"MI\" \"spearman\" columns. cal_mat matrix normalized log-transformed gene expression values activity_method Character, method used calculate activity: \"mean\" (default), \"weightedmean\", \"absmean\" \"maxmean\". .std Logical, whether z-normalization gene expression values sample. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/cal_Activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate driver activities from gene expression matrix and networks — cal_Activity","text":"matrix activities, drivers cells","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/cal_Activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate driver activities from gene expression matrix and networks — cal_Activity","text":"","code":"net_data <-  read.table(system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                         header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE, quote = \"\",                         colClasses = c(\"character\", \"character\", \"character\", \"character\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\")) target_list <- get_net2target_list(net_data)  data(pbmc14k_expression.eset)  act_mat <- cal_Activity(target_list = target_list, cal_mat = exprs(pbmc14k_expression.eset), activity_method = 'mean', do.std = TRUE)"},{"path":"https://jyyulab.github.io/scMINER/reference/combinePvalVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine P values using Fisher's method or Stouffer's method — combinePvalVector","title":"Combine P values using Fisher's method or Stouffer's method — combinePvalVector","text":"function used calculate combined P value Z score multiple P values. can also used convert P value Z score.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/combinePvalVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine P values using Fisher's method or Stouffer's method — combinePvalVector","text":"","code":"combinePvalVector(pvals, method = \"Stouffer\", signed = TRUE, twosided = TRUE)"},{"path":"https://jyyulab.github.io/scMINER/reference/combinePvalVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine P values using Fisher's method or Stouffer's method — combinePvalVector","text":"pvals vector numeric, P values combined converted Z scores method Character, method used combine P values: \"Stouffer\" (default) \"Fisher\". signed Logical, whether input P values signed . Usually signed folder change. Default: TRUE. twosided Logical, whether input P values two-sided. FALSE, input P values treated one-tailed. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/combinePvalVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine P values using Fisher's method or Stouffer's method — combinePvalVector","text":"vector containing \"Z-statistics\" \"P.Value\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/combinePvalVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine P values using Fisher's method or Stouffer's method — combinePvalVector","text":"","code":"## 1. combine P values from a vector combinePvalVector(c(0.1,1e-3,1e-5), method = 'Stouffer') #> Z-statistics      P.Value  #> 5.399699e+00 6.675264e-08   if (FALSE) { # \\dontrun{ ## 2. combine P values from a table df_Pcombined <- sapply(df$Pval*sign(df$log2FC), function(x) {combinePvalVector(x, twosided = TRUE)[2]}) df_Zscore <- sapply(df$Pval*sign(df$log2FC), function(x) {combinePvalVector(x, twosided = TRUE)[1]}) } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/combineSparseEset.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple sparse expression set objects — combineSparseEset","title":"Combine multiple sparse expression set objects — combineSparseEset","text":"function used combine sparse expression set objects. combined eset object contains cells features input eset objects. eset objects different features, NA values generated automatically imputed minimum value combined gene expression matrix.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/combineSparseEset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple sparse expression set objects — combineSparseEset","text":"","code":"combineSparseEset(   eset_list,   projectID = NULL,   addPrefix = NULL,   addSurfix = NULL,   addMetaData = TRUE,   imputeNA = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/combineSparseEset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple sparse expression set objects — combineSparseEset","text":"eset_list vector sparse expression set objects combine projectID character vector NULL, set project names eset objects combine. Default: NULL. addPrefix character vector NULL, add prefix cell barcodes eset object combine. highly recommended use prefix containing letters /numbers , starting numbers. Default: NULL. addSurfix character vector NULL, add surfix cell barcodes eset object combine. highly recommended use surfix containing letters /numbers , starting numbers. Default: NULL. addMetaData Logical, whether update meta data cells features combination. Default: TRUE. imputeNA Logical, whether impute NA values combined matrix. TRUE, min value matrix used replace NAs. FALSE, NA values retain. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/combineSparseEset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple sparse expression set objects — combineSparseEset","text":"sparse eset object combined features cells multiple eset objects.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/combineSparseEset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple sparse expression set objects — combineSparseEset","text":"","code":"demo1_mtx <- readInput_10x.dir(input_dir = system.file(\"extdata/demo_inputs/cell_matrix_10x\", package = \"scMINER\"),                                featureType = \"gene_symbol\", removeSuffix = TRUE) #> Reading 10x Genomcis data from: /home/runner/work/_temp/Library/scMINER/extdata/demo_inputs/cell_matrix_10x ... #> \tMultiple data modalities were found: Gene Expression, Peaks . Only the gene expression data (under \"Gene Expression\") was kept. #> Done! The sparse gene expression matrix has been generated: 500 genes, 100 cells. demo1.eset <- createSparseEset(input_matrix = demo1_mtx, projectID = \"demo1\", addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #> \tAdding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 500 genes, 100 cells. demo2_mtx <- readInput_table(table_file = system.file(\"extdata/demo_inputs/table_file/demoData2.txt.gz\", package = \"scMINER\"),                              is.geneBYcell = TRUE, removeSuffix = TRUE) #> Reading table file: /home/runner/work/_temp/Library/scMINER/extdata/demo_inputs/table_file/demoData2.txt.gz ... #> \tSuffix removal was specified but skipped, since some barcodes do not carry \"-1\" suffix. #> Done! The sparse gene expression matrix has been generated: 1000 genes, 100 cells. demo2.eset <- createSparseEset(input_matrix = demo2_mtx, projectID = \"demo2\", addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #> \tAdding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 1000 genes, 100 cells. combined.eset <- combineSparseEset(eset_list = c(demo1.eset, demo2.eset),                                    projectID = c(\"sample1\", \"sample2\"),                                    addPrefix = c(\"demo1\", \"demo2\"),                                    addSurfix = NULL,                                    addMetaData = TRUE,                                    imputeNA = TRUE) #> Combining the input sparse eSets ... #> NA values were found in the merged matrix and have been replaced by the minimum value:  0 . #> Adding meta data based on merged data matrix ... #> Done! The combined sparse eset has been generated: 1500 genes, 200 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/compare2groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential analysis between two groups — compare2groups","title":"Perform differential analysis between two groups — compare2groups","text":"function used perform differential analysis two groups. supports methods: \"limma\", \"wilcoxon\", \"t.test\". internal function getDE() getDA().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/compare2groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential analysis between two groups — compare2groups","text":"","code":"compare2groups(   input_eset,   group_by = \"clusterID\",   g1 = NULL,   g0 = NULL,   use_method = \"limma\" )"},{"path":"https://jyyulab.github.io/scMINER/reference/compare2groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential analysis between two groups — compare2groups","text":"input_eset expression set object filtered, normalized log-transformed group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". g1 vector character defining fore-ground group NULL. Default: NULL. g0 vector character defining back-ground group NULL. Default: NULL. use_method Character, method used differential analysis: \"limma\" (default), \"wilcoxon\", \"t.test\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/compare2groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential analysis between two groups — compare2groups","text":"data frame. Rows genes/drivers, columns 11 statistics differential analysis.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/compare2groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential analysis between two groups — compare2groups","text":"","code":"## to call this function data(pbmc14k_expression.eset) res <- compare2groups(input_eset = pbmc14k_expression.eset,                       group_by = \"cellType\",                       g1 = c(\"CD4TCM\", \"CD4TN\", \"CD4Treg\", \"CD8TN\", \"Monocyte\", \"NK\"),                       g0 = c(\"B\"),                       use_method = \"limma\") #> \t 2999 cells were found for g1. #> \t 501 cells were found for g0."},{"path":"https://jyyulab.github.io/scMINER/reference/createProjectSpace.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a project space for scMINER analysis — createProjectSpace","title":"Create a project space for scMINER analysis — createProjectSpace","text":"function used create folder specified project names specified project directory project space run scMINER analysis. also creastes 4 subfolers inside : \"DATA\", \"MICA\", \"SJARACNe\" \"PLOT\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/createProjectSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a project space for scMINER analysis — createProjectSpace","text":"","code":"createProjectSpace(project_dir, project_name, do.unlink = FALSE)"},{"path":"https://jyyulab.github.io/scMINER/reference/createProjectSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a project space for scMINER analysis — createProjectSpace","text":"project_dir directory create project space project_name name project, used name folder .unlink Logical, whether remove files /folders inside pre-existing project space. Default: FALSE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/createProjectSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a project space for scMINER analysis — createProjectSpace","text":"creates folder project name 4 subfolders project directory, returns path project space.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/createProjectSpace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a project space for scMINER analysis — createProjectSpace","text":"","code":"if (FALSE) { # \\dontrun{ scminer_dir <- createProjectSpace(project_dir = \"path-to-a-folder\",                                   project_name = \"PBMC14k\") } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/createSparseEset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sparse expression set object from a data matrix — createSparseEset","title":"Create a sparse expression set object from a data matrix — createSparseEset","text":"function used create pre-defined sparse expression set object data matrix differnt classes: \"dgCMatrix\", \"dgTMatrix\", \"dgeMatrix\", \"matrix\", \"data.frame\". allows users provide self-customized meta data cells (parameter cellData) genes (parameter featureData). can also generate meta data automatically, addMetaData = TRUE. automatically generated meta data includes: \"nUMI\": number total UMIs cell, valid values data matrix raw UMI counts; \"nFeature\": number expressed features/genes cell; \"pctMito\": percentage UMIs mitochondrial genes (defined \"^mt-|^MT-\") cell; \"pctSpikeIn\": percentage UMIs spike-RNAs (defined \"^ERCC-|^Ercc-\") cell; \"nCell\": number cells feature/gene identified .","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/createSparseEset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sparse expression set object from a data matrix — createSparseEset","text":"","code":"createSparseEset(   input_matrix,   do.sparseConversion = TRUE,   cellData = NULL,   featureData = NULL,   annotation = \"\",   projectID = NULL,   addMetaData = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/createSparseEset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sparse expression set object from a data matrix — createSparseEset","text":"input_matrix data matrix Features/Genes rows Cells columns. one : 'dgCMatrix', 'dgTMatrix', 'dgeMatrix', 'matrix', 'data.frame'. .sparseConversion Logical, whether convert input_matrix sparse matrix . Default: TRUE. cellData data frame containing meta data cells NULL. row.names consistent colnames input_matrix. Default: NULL. featureData data frame containing meata data features NULL. row.names consistent row.names input_matrix. Default: NULL. annotation Character, character describing project properties. highly recommended use path project space. Default: \"\". projectID Character NULL, project name sparse eset object. Default: NULL. addMetaData Logical, whether calculate add extra statistics (.k.. meta data) cells features. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/createSparseEset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sparse expression set object from a data matrix — createSparseEset","text":"sparse eset object three slot: 1) gene cell matrix; 2) data frame cell information; 3) data frame feature/gene information.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/createSparseEset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sparse expression set object from a data matrix — createSparseEset","text":"","code":"data(\"pbmc14k_rawCount\") ## 1. Create SparseEset object solely from raw count matrix pbmc14k_raw.eset <- createSparseEset(input_matrix = pbmc14k_rawCount,                                      projectID = \"PBMC14k\",                                      addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #> \tAdding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 17986 genes, 14000 cells.  ## 2. Create SparseEset with customized meta data true_label <- read.table(system.file(\"extdata/demo_pbmc14k/PBMC14k_trueLabel.txt.gz\", package = \"scMINER\"),                          header = TRUE, row.names = 1, sep = \"\\t\", quote = \"\", stringsAsFactors = FALSE) pbmc14k_raw.eset <- createSparseEset(input_matrix = pbmc14k_rawCount,                                      cellData = true_label,                                      featureData = NULL,                                      projectID = \"PBMC14k\",                                      addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #> \tAdding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 17986 genes, 14000 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/drawNetworkQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess the quality of each network generated by SJARACNe — drawNetworkQC","title":"Assess the quality of each network generated by SJARACNe — drawNetworkQC","text":"function used assess quality networks generated SJARACNe. returns summary table key statistics networks. users can also generate html quality control report turning generate_html = TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/drawNetworkQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess the quality of each network generated by SJARACNe — drawNetworkQC","text":"","code":"drawNetworkQC(   network_file = NULL,   sjaracne_dir = NULL,   directed = TRUE,   weighted = TRUE,   generate_html = TRUE,   outdir = NULL,   prefix = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/drawNetworkQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess the quality of each network generated by SJARACNe — drawNetworkQC","text":"network_file path network file (consensus_network_ncol_.txt) quality control sjaracne_dir path folder SJARACNe runs. argument given, scMINER automatically retrieve network files (consensus_network_ncol_.txt) folder generate quality control report . directed Logical, whether network directed . networks generated SJARACNe directed. Default: TRUE. weighted Logical, whether edges network weighted . networks generated SJARACNe weighted mutual information (\"MI\" column). Default: TRUE. generate_html Logical, whether generate html report. Default: TRUE. outdir Character NULL, path save html report. NULL, html report saved folder network file. Default: NULL. Ignored generate_html = FALSE. prefix Character NULL, character string add front html report file name. Default: NULL. Ignored generate_html = FALSE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/drawNetworkQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess the quality of each network generated by SJARACNe — drawNetworkQC","text":"function print statistics several key quality metrics network(s). generate_html set TRUE, also generates html file quality control report save folder network file (default) folder specified \"outdir\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/drawNetworkQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess the quality of each network generated by SJARACNe — drawNetworkQC","text":"","code":"if (FALSE) { # \\dontrun{ ## 1. Assess the quality of network from network files drawNetworkQC(network_file = \"/project_space/SJARACNE/B/SIG/b100/consensus_network_ncol_.txt\", generate_html = TRUE,               outdir = \"/folder-to-save-report_file\", prefix = \"PBMC14\")  ## 2. Assess the quality of network from the directory of network files drawNetworkQC(sjaracne_dir = \"/project_space/SJARACNE\", generate_html = TRUE) } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/drawSparseEsetQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a quality control report from sparse eset object — drawSparseEsetQC","title":"Generate a quality control report from sparse eset object — drawSparseEsetQC","text":"function used generate html quality control report sparse eset object. Compared summary table return filterSparseEset(), output report contains comprehensive detailed QC results can used estimate cutoffs filter eset object. also contains plots presentation purpose.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/drawSparseEsetQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a quality control report from sparse eset object — drawSparseEsetQC","text":"","code":"drawSparseEsetQC(   input_eset,   output_html_file,   overwrite = FALSE,   group_by = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/drawSparseEsetQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a quality control report from sparse eset object — drawSparseEsetQC","text":"input_eset sparse eset object quality control analysis output_html_file path output .html file overwrite Logical, whether overwrite output .html file already exists. Default: FALSE. group_by Character NULL, Name column pData(eset) used grouping. Default: NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/drawSparseEsetQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a quality control report from sparse eset object — drawSparseEsetQC","text":"html-formatted quality control report sparse eset object","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/drawSparseEsetQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a quality control report from sparse eset object — drawSparseEsetQC","text":"","code":"if (FALSE) { # \\dontrun{ ## 1. To generate the QC report in a group-specific manner, recommended whenever group information is available. drawSparseEsetQC(input_eset = pbmc14k_raw.eset,                  output_html_file = \"/your-path/PBMC14k/PLOT/pbmc14k_rawCount.html\",                  overwrite = FALSE,                  group_by = \"trueLabel\")  ## 2. To generate the QC report from a whole view drawSparseEsetQC(input_eset = pbmc14k_raw.eset,                  output_html_file = \"/your-path/PBMC14k/PLOT/pbmc14k_rawCount.html\",                  overwrite = FALSE,                  group_by = NULL) } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/draw_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot showing the cell composition of self-defined groups — draw_barplot","title":"Bar plot showing the cell composition of self-defined groups — draw_barplot","text":"function used draw bar plot showing cell composition self-defined groups.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/draw_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot showing the cell composition of self-defined groups — draw_barplot","text":"","code":"draw_barplot(   input_eset,   group_by = \"clusterID\",   color_by = \"cell_type\",   colors = NULL,   legend.position = \"right\",   xlabel.angle = 0,   fontsize.legend_title = 12,   fontsize.legend_text = 10,   fontsize.axis_title = 12,   fontsize.axis_text = 10 )"},{"path":"https://jyyulab.github.io/scMINER/reference/draw_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot showing the cell composition of self-defined groups — draw_barplot","text":"input_eset expression set object filtered, normalized log-transformed group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". color_by Character, name column color-coding, usually column cell types clusters. Default: \"cell_type\". colors vector colors filling violins. length number groups. Default: NULL (ggplot default colors). legend.position Character, position legend: \"right\" (default), \"left\", \"top\", \"bottom\" \"none\". xlabel.angle Numeric, angle -axis title. set 0, x-axis text automatically right-justified. Default: 0. fontsize.legend_title Integer, font size legend title. Default: 10. fontsize.legend_text Integer, font size legend text. Default: 8. fontsize.axis_title Integer, font size axis label text. Default: 10. fontsize.axis_text Integer, font size axis label text. Default: 8.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/draw_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot showing the cell composition of self-defined groups — draw_barplot","text":"ggplot object can visualized \"p\" ggsave(file = \"output.pdf\", p)","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/draw_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot showing the cell composition of self-defined groups — draw_barplot","text":"","code":"data(pbmc14k_expression.eset)  ## 1. bar plot grouped by clusters (\"clusterID\") and colored by true labels (\"true_label) draw_barplot(input_eset = pbmc14k_expression.eset,              group_by = \"clusterID\",              color_by = \"trueLabel\")   ## 2. customize the colors draw_barplot(input_eset = pbmc14k_expression.eset,              group_by = \"clusterID\",              color_by = \"trueLabel\",              colors = c(\"green\", \"red\", \"blue\", \"grey\", \"orange\", \"purple\", \"yellow\"))"},{"path":"https://jyyulab.github.io/scMINER/reference/draw_bubbleplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bubble plot showing the signature scores by self-defined groups — draw_bubbleplot","title":"Bubble plot showing the signature scores by self-defined groups — draw_bubbleplot","text":"function used draw bubble plot signature scores among self-defined groups.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/draw_bubbleplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bubble plot showing the signature scores by self-defined groups — draw_bubbleplot","text":"","code":"draw_bubbleplot(   input_eset,   signature_table = NULL,   group_by = \"clusterID\",   colors = NULL,   legend.position = \"right\",   fontsize.legend_title = 10,   fontsize.legend_text = 8,   fontsize.axis_title = 10,   fontsize.axis_text = 8,   xlabel.angle = 0 )"},{"path":"https://jyyulab.github.io/scMINER/reference/draw_bubbleplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bubble plot showing the signature scores by self-defined groups — draw_bubbleplot","text":"input_eset expression set object filtered, normalized log-transformed signature_table matrix data frame containing three columns: signature_name, signature_feature, weight. Default: NULL. group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". colors vector two colors indicating low high values respectively. Default: c(\"lightgrey\", \"red\"). legend.position Character, position legend: \"right\" (default), \"left\", \"top\", \"bottom\" \"none\". fontsize.legend_title Integer, font size legend title. Default: 10. fontsize.legend_text Integer, font size legend text. Default: 8. fontsize.axis_title Integer, font size axis label text. Default: 10. fontsize.axis_text Integer, font size axis label text. Default: 8. xlabel.angle Numeric, angle -axis title. set 0, x-axis text automatically right-justified. Default: 0.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/draw_bubbleplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bubble plot showing the signature scores by self-defined groups — draw_bubbleplot","text":"ggplot object bubble plot","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/draw_bubbleplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bubble plot showing the signature scores by self-defined groups — draw_bubbleplot","text":"","code":"data(pbmc14k_expression.eset) signature_table <- read.table(system.file('extdata/demo_pbmc14k/PBMC14k_signatureTable.txt', package = \"scMINER\"), header = TRUE, sep = \"\\t\", quote = \"\", stringsAsFactors = FALSE) head(signature_table) #>   signature_name signature_feature weight #> 1       Monocyte              CD14      1 #> 2       Monocyte               LYZ      1 #> 3       Monocyte            S100A8      1 #> 4       Monocyte            S100A9      1 #> 5       Monocyte           S100A12      1 #> 6             NK            FCGR3A      1  ## 1. the most commonly used command draw_bubbleplot(input_eset = pbmc14k_expression.eset,                 signature_table = signature_table,                 group_by = \"clusterID\") #> 31 features of 7 signatures were found in the input eset and will be used in calculation.   ## 2. customize the colors draw_bubbleplot(input_eset = pbmc14k_expression.eset,                 signature_table = signature_table,                 group_by = \"clusterID\",                 colors = c(\"lightgrey\", \"red\")) #> 31 features of 7 signatures were found in the input eset and will be used in calculation."},{"path":"https://jyyulab.github.io/scMINER/reference/feature_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Box plot showing the expression or activity of selected features by self-defined groups — feature_boxplot","title":"Box plot showing the expression or activity of selected features by self-defined groups — feature_boxplot","text":"function used draw box plot selected features among self-defined groups sparse eset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box plot showing the expression or activity of selected features by self-defined groups — feature_boxplot","text":"","code":"feature_boxplot(   input_eset,   features = NULL,   group_by = \"clusterID\",   ncol = 3,   colors = NULL,   legend.position = \"right\",   fontsize.legend_title = 10,   fontsize.legend_text = 8,   fontsize.strip = 10,   fontsize.axis_title = 10,   fontsize.axis_text = 8,   xlabel.angle = 0,   ylabel.text = \"Expression (log2CPM)\",   stat_method = \"median\",   add_jitter = FALSE,   jitter.height = 0,   jitter.width = 0.3,   jitter.size = 0.1 )"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box plot showing the expression or activity of selected features by self-defined groups — feature_boxplot","text":"input_eset expression set object filtered, normalized log-transformed features vector genes drivers (row.names input eset) plot group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". ncol Integer, number columns multiple plots displayed. Default: 3. colors vector colors filling violins. length number groups. Default: NULL (ggplot default colors). legend.position Character, position legend: \"right\" (default), \"left\", \"top\", \"bottom\" \"none\". fontsize.legend_title Integer, font size legend title. Default: 10. fontsize.legend_text Integer, font size legend text. Default: 8. fontsize.strip Integer, font size plot strip. Default: 10. fontsize.axis_title Integer, font size axis label text. Default: 10. fontsize.axis_text Integer, font size axis label text. Default: 8. xlabel.angle Numeric, angle -axis title. set 0, x-axis text automatically right-justified. Default: 0. ylabel.text Character, title y-axis. Default: \"Expression (log2CPM)\" stat_method Character NULL. method stat point show: \"median\" (default), \"mean\". NULL, stat point show . add_jitter Logical, whether add jittered points. Default: FALSE. jitter.height Numeric, amount vertical jitter. Default: 0. jitter.width Numeric, amount horizontal jitter. Default: 0.3. jitter.size Numeric, size jittered points. Default: 0.1.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box plot showing the expression or activity of selected features by self-defined groups — feature_boxplot","text":"ggplot object one multiple box plots","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box plot showing the expression or activity of selected features by self-defined groups — feature_boxplot","text":"","code":"data(pbmc14k_expression.eset)  ## 1. violin plots grouped by clusters (say the column name is 'clusterID') p_box <- feature_boxplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"clusterID\")  ## 2. violin plots grouped by cell types (say the column name is 'cellType') p_box <- feature_boxplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"cellType\")  ## 3. customize the colors to fill the violin plots p_box <- feature_boxplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"clusterID\",                          colors = c(\"blue\", \"red\", \"green\", \"orange\", \"purple\", \"grey\", \"brown\"))  ## 4. add jittered points p_box <- feature_boxplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"clusterID\",                          add_jitter = TRUE,                          jitter.width = 0.5, jitter.size = 0.5)"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_bubbleplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bubble blot showing the expression or activity of selected features by self-defined groups — feature_bubbleplot","title":"Bubble blot showing the expression or activity of selected features by self-defined groups — feature_bubbleplot","text":"function used draw bubble plot selected features among self-defined groups sparse eset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_bubbleplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bubble blot showing the expression or activity of selected features by self-defined groups — feature_bubbleplot","text":"","code":"feature_bubbleplot(   input_eset,   features = NULL,   group_by = \"clusterID\",   colors = NULL,   legend.position = \"right\",   fontsize.legend_title = 10,   fontsize.legend_text = 8,   fontsize.axis_title = 10,   fontsize.axis_text = 8,   xlabel.angle = 0 )"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_bubbleplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bubble blot showing the expression or activity of selected features by self-defined groups — feature_bubbleplot","text":"input_eset expression set object filtered, normalized log-transformed features vector genes drivers (row.names input eset) plot group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". colors vector two colors indicating low high values respectively. Default: c(\"lightgrey\", \"red\"). legend.position Character, position legend: \"right\" (default), \"left\", \"top\", \"bottom\" \"none\". fontsize.legend_title Integer, font size legend title. Default: 10. fontsize.legend_text Integer, font size legend text. Default: 8. fontsize.axis_title Integer, font size axis label text. Default: 10. fontsize.axis_text Integer, font size axis label text. Default: 8. xlabel.angle Numeric, angle -axis title. set 0, x-axis text automatically right-justified. Default: 0.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_bubbleplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bubble blot showing the expression or activity of selected features by self-defined groups — feature_bubbleplot","text":"ggplot object bubble plot","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_bubbleplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bubble blot showing the expression or activity of selected features by self-defined groups — feature_bubbleplot","text":"","code":"data(pbmc14k_expression.eset) features_of_interest <- c(\"CD3D\",\"CD27\",\"IL7R\",\"SELL\",\"CCR7\",\"IL32\",\"GZMA\",\"GZMK\",                           \"DUSP2\",\"CD8A\",\"GZMH\",\"GZMB\",\"CD79A\",\"CD79B\",\"CD86\",\"CD14\") ## 1. the most commonly used command feature_bubbleplot(input_eset = pbmc14k_expression.eset,                    features = features_of_interest,                    group_by = \"clusterID\")   ## 2. customize the colors feature_bubbleplot(input_eset = pbmc14k_expression.eset,                    features = features_of_interest,                    group_by = \"clusterID\",                    colors = c(\"lightgrey\", \"blue\"))"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap showing the expression or activity of selected features by self-defined groups — feature_heatmap","title":"Heatmap showing the expression or activity of selected features by self-defined groups — feature_heatmap","text":"function used draw heatmap selected features among self-defined groups sparse eset object. default, groups sorted size, largest smallest. Within group, cells sorted alphabetically.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap showing the expression or activity of selected features by self-defined groups — feature_heatmap","text":"","code":"feature_heatmap(   input_eset,   features = NULL,   group_by = \"clusterID\",   scale_method = \"none\",   annotation_columns = NULL,   use_gaps.column = FALSE,   cluster_rows = FALSE,   show_rownames = TRUE,   fontsize.row = 10,   use_gaps.row = FALSE )"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap showing the expression or activity of selected features by self-defined groups — feature_heatmap","text":"input_eset expression set object filtered, normalized log-transformed features vector genes drivers (row.names input eset) plot group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". scale_method Character, method data scaling: \"none\" (default), \"column\", \"row\". annotation_columns Character, name(s) column(s) add cell annotation. Default: NULL. use_gaps.column Logical, whether put gap cell groups. Default: FALSE. cluster_rows Logical, whether cluster rows. TRUE, rows clustered. FALSE, rows displays following order 'features'. Default: FALSE. show_rownames Logical, whether show rownames. Default: TRUE. fontsize.row Numeric, font size rownames. Defualt: 10. use_gaps.row Logical, whether put gap features. Default: FALSE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap showing the expression or activity of selected features by self-defined groups — feature_heatmap","text":"Print heatmap screen","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap showing the expression or activity of selected features by self-defined groups — feature_heatmap","text":"","code":"data(pbmc14k_expression.eset) features_of_interest <- c(\"CD3D\",\"CD27\",\"IL7R\",\"SELL\",\"CCR7\",\"IL32\",\"GZMA\",\"GZMK\",                           \"DUSP2\",\"CD8A\",\"GZMH\",\"GZMB\",\"CD79A\",\"CD79B\",\"CD86\",\"CD14\")  ## 1. the most commonly used command feature_heatmap(input_eset = pbmc14k_expression.eset,                 features = features_of_interest,                 group_by = \"clusterID\")   ## 2. add one more column ('true_label') for cell annotation feature_heatmap(input_eset = pbmc14k_expression.eset,                 features = features_of_interest,                 group_by = \"clusterID\",                 annotation_columns = c(\"trueLabel\"))   ## 3. scale the data by row feature_heatmap(input_eset = pbmc14k_expression.eset,                 features = features_of_interest,                 group_by = \"clusterID\",                 scale_method = \"row\")   ## 4. cluster the rows feature_heatmap(input_eset = pbmc14k_expression.eset,                 features = features_of_interest,                 group_by = \"clusterID\",                 cluster_rows = TRUE)   ## 5. add gaps feature_heatmap(input_eset = pbmc14k_expression.eset,                 features = features_of_interest,                 group_by = \"clusterID\",                 use_gaps.column = TRUE,                 use_gaps.row = TRUE)"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot showing the expression or activity of selected features on UMAP or t-SNE coordinates — feature_scatterplot","title":"Scatter plot showing the expression or activity of selected features on UMAP or t-SNE coordinates — feature_scatterplot","text":"function used draw scatter plot selected features UMAP t-SNE coordinates sparse eset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot showing the expression or activity of selected features on UMAP or t-SNE coordinates — feature_scatterplot","text":"","code":"feature_scatterplot(   input_eset,   features = NULL,   location_x = \"UMAP_1\",   location_y = \"UMAP_2\",   colors = NULL,   ncol = 3,   point.size = 0.5,   legend.position = \"right\",   legend.key_height = 3,   legend.key_width = 1,   fontsize.legend_title = 10,   fontsize.legend_text = 8,   fontsize.strip = 10,   fontsize.axis_title = 10,   fontsize.axis_text = 8 )"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot showing the expression or activity of selected features on UMAP or t-SNE coordinates — feature_scatterplot","text":"input_eset expression set object filtered, normalized log-transformed features vector genes drivers (row.names input eset) plot location_x Character, name column x-axis coordinates. Default: \"UMAP_1\". location_y Character, name column y-axis coordinates. Default: \"UMAP_2\". colors vector two colors indicating low high values respectively. Default: c(\"lightgrey\", \"red\"). ncol Integer, number columns multiple plots displayed. Default: 3. point.size Numeric, size scatter points. Default: 0.5. legend.position Character, position legend: \"right\" (default), \"left\", \"top\", \"bottom\" \"none\". legend.key_height Numeric, height legend key unit \"cm\". Default: 3. legend.key_width Numeric, width legend key unit \"cm\". Default: 1. fontsize.legend_title Numeric, font size legend title. Default: 10. fontsize.legend_text Numeric, font size legend text. Default: 8. fontsize.strip Numeric, font size plot strip. Default: 10. fontsize.axis_title Numeric, font size axis label text. Default: 10. fontsize.axis_text Numeric, font size axis label text. Default: 8.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot showing the expression or activity of selected features on UMAP or t-SNE coordinates — feature_scatterplot","text":"Print plot screen return gtable containing list plots, can visualized plot(g), saved ggsave(file = \"output.pdf\", g)","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_scatterplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot showing the expression or activity of selected features on UMAP or t-SNE coordinates — feature_scatterplot","text":"","code":"data(pbmc14k_expression.eset)  ## 1. scatter plots with UMAP/tSNE projections feature_scatterplot(input_eset = pbmc14k_expression.eset,                     features = c(\"CD14\", \"CD19\", \"CD8A\"),                     location_x = \"UMAP_1\", location_y = \"UMAP_2\")   ## 2. change the point size and font size feature_scatterplot(input_eset = pbmc14k_expression.eset,                     features = c(\"CD14\", \"CD19\", \"CD8A\"),                     location_x = \"UMAP_1\", location_y = \"UMAP_2\",                     point.size = 1, fontsize.strip = 12,                     fontsize.axis_title = 10, fontsize.axis_text = 8)"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_vlnplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plot showing the expression or activity of selected features by self-defined groups — feature_vlnplot","title":"Violin plot showing the expression or activity of selected features by self-defined groups — feature_vlnplot","text":"function used draw violin plot selected features among self-defined groups sparse eset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_vlnplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plot showing the expression or activity of selected features by self-defined groups — feature_vlnplot","text":"","code":"feature_vlnplot(   input_eset,   features = NULL,   group_by = \"clusterID\",   ncol = 3,   colors = NULL,   legend.position = \"right\",   fontsize.legend_title = 10,   fontsize.legend_text = 8,   fontsize.strip = 10,   fontsize.axis_title = 10,   fontsize.axis_text = 8,   xlabel.angle = 0,   ylabel.text = \"Expression (log2CPM)\",   stat_method = \"median\",   add_boxplot = FALSE,   boxplot.width = 0.3,   boxplot.fill = \"white\",   boxplot.alpha = 0.8,   add_jitter = FALSE,   jitter.height = 0,   jitter.width = 0.3,   jitter.size = 0.1 )"},{"path":"https://jyyulab.github.io/scMINER/reference/feature_vlnplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plot showing the expression or activity of selected features by self-defined groups — feature_vlnplot","text":"input_eset expression set object filtered, normalized log-transformed features vector genes drivers (row.names input eset) plot group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". ncol Integer, number columns multiple plots displayed. Default: 3. colors vector colors filling violins. length number groups. Default: NULL (ggplot default colors). legend.position Character, position legend: \"right\" (default), \"left\", \"top\", \"bottom\" \"none\". fontsize.legend_title Integer, font size legend title. Default: 10. fontsize.legend_text Integer, font size legend text. Default: 8. fontsize.strip Integer, font size plot strip. Default: 10. fontsize.axis_title Integer, font size axis title. Default: 10. fontsize.axis_text Integer, font size axis text. Default: 8. xlabel.angle Numeric, angle -axis title. set 0, x-axis text automatically right-justified. Default: 0. ylabel.text Character, title y-axis. Default: \"Expression (log2CPM)\" stat_method Character NULL. method stat point show: \"median\" (default), \"mean\". NULL, stat point show . add_boxplot Logical, whether add box plot. Default: FALSE. boxplot.width Numeric, width box plot relative body violin plot, ranging 0 1. Default: 0.3. Ignored add_boxplot = FALSE. boxplot.fill Character, color used fill box plots. Default: \"white\". Ignored add_boxplot = FALSE. boxplot.alpha Numerical, transparency box plots, ranging 0 (transparent) 1 (less transparent). Default: 0.8. Ignored add_boxplot = FALSE. add_jitter Logical, whether add jittered points. Default: FALSE. jitter.height Numeric, amount vertical jitter. Default: 0. jitter.width Numeric, amount horizontal jitter. Default: 0.3. jitter.size Numeric, size jittered points. Default: 0.1.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_vlnplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plot showing the expression or activity of selected features by self-defined groups — feature_vlnplot","text":"ggplot object one multiple violin plots","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/feature_vlnplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Violin plot showing the expression or activity of selected features by self-defined groups — feature_vlnplot","text":"","code":"data(pbmc14k_expression.eset)  ## 1. violin plots grouped by clusters (say the column name is 'clusterID') p_vln <- feature_vlnplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"clusterID\")  ## 2. violin plots grouped by cell types (say the column name is 'cellType') p_vln <- feature_vlnplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"cellType\")  ## 3. customize the colors to fill the violin plots p_vln <- feature_vlnplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"clusterID\",                          colors = c(\"blue\", \"red\", \"green\", \"orange\", \"purple\", \"grey\", \"brown\"))  ## 4. add jittered points p_vln <- feature_vlnplot(input_eset = pbmc14k_expression.eset,                          features = c(\"CD14\", \"CD19\", \"CD8A\"),                          group_by = \"clusterID\",                          add_jitter = TRUE, jitter.width = 0.5, jitter.size = 0.5)"},{"path":"https://jyyulab.github.io/scMINER/reference/filterSparseEset.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the cells and/or features of sparse eset object using automatic or self-customized cutoffs — filterSparseEset","title":"Filter the cells and/or features of sparse eset object using automatic or self-customized cutoffs — filterSparseEset","text":"function used remove cells features low quality. provides two modes define cutoffs: \"auto\": mode, scMINER estimate cutoffs based Median ± 3*MAD (maximum absolute deviation). mode works well matrix raw UMI counts TPM (Transcripts Per Million) values. \"manual\": mode, users can manually specify cutoffs, low high, 5 metrics: nUMI, nFeature, pctMito, pctSpikeIn cells, nCell genes. cells features removed default cutoffs metrics.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/filterSparseEset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the cells and/or features of sparse eset object using automatic or self-customized cutoffs — filterSparseEset","text":"","code":"filterSparseEset(   input_eset,   filter_mode = \"auto\",   filter_type = \"both\",   gene.nCell_min = NULL,   gene.nCell_max = NULL,   cell.nUMI_min = NULL,   cell.nUMI_max = NULL,   cell.nFeature_min = NULL,   cell.nFeature_max = NULL,   cell.pctMito_min = NULL,   cell.pctMito_max = NULL,   cell.pctSpikeIn_min = NULL,   cell.pctSpikeIn_max = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/filterSparseEset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the cells and/or features of sparse eset object using automatic or self-customized cutoffs — filterSparseEset","text":"input_eset sparse eset object filtered filter_mode Character, mode apply filtration cutoffs: \"auto\" (default) \"manual\". filter_type Character, objective type filtered: \"\" (default), \"cell\" \"feature\" . gene.nCell_min Numeric, minimum number cells qualified genes identified . Default: 1. gene.nCell_max Numeric, maximum number cells qualified genes identified . Default: Inf. cell.nUMI_min Numeric, minimum number total UMI counts per cell qualified cells carry. Default: 1. cell.nUMI_max Numeric, maximum number total UMI counts per cell qualified cells carry. Default: Inf. cell.nFeature_min Numeric, minimum number non-zero Features per cell qualified cells carry. Default: 1. cell.nFeature_max Numeric, maximum number non-zero Features per cell qualified cells carry. Default: Inf. cell.pctMito_min Numeric, minimum percentage UMI counts mitochondrial genes qualified cells carry. Default: 0. cell.pctMito_max Numeric, maximum percentage UMI counts mitochondrial genes qualified cells carry. Default: 1. cell.pctSpikeIn_min Numeric, minimum percentage UMI counts spike-qualified cells carry. Default: 0. cell.pctSpikeIn_max Numeric, maximum percentage UMI counts spike-qualified cells carry. Default: 1.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/filterSparseEset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the cells and/or features of sparse eset object using automatic or self-customized cutoffs — filterSparseEset","text":"filtered sparse eset object. also prints summary filtration screen.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/filterSparseEset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the cells and/or features of sparse eset object using automatic or self-customized cutoffs — filterSparseEset","text":"","code":"data(\"pbmc14k_rawCount\") pbmc14k_raw.eset <- createSparseEset(input_matrix = pbmc14k_rawCount, projectID = \"PBMC14k\", addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #> \tAdding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 17986 genes, 14000 cells.  ## 1. using the cutoffs automatically calculated by scMINER pbmc14k_filtered_auto.eset <- filterSparseEset(pbmc14k_raw.eset, filter_mode = \"auto\", filter_type = \"both\") #> Checking the availability of the 5 metrics ('nCell', 'nUMI', 'nFeature', 'pctMito', 'pctSpikeIn') used for filtration ... #> Checking passed! All 5 metrics are available. #> Filtration is done! #> Filtration Summary: #> \t8846/17986 genes passed! #> \t13605/14000 cells passed! #>  #> For more details: #> \tGene filtration statistics: #> \t\tMetrics\t\tnCell #> \t\tCutoff_Low\t70 #> \t\tCutoff_High\tInf #> \t\tGene_total\t17986 #> \t\tGene_passed\t8846(49.18%) #> \t\tGene_failed\t9140(50.82%) #>  #> \tCell filtration statistics: #> \t\tMetrics\t\tnUMI\t\tnFeature\tpctMito\t\tpctSpikeIn\tCombined #> \t\tCutoff_Low\t458\t\t221\t\t0\t\t0\t\tNA #> \t\tCutoff_High\t3694\t\tInf\t\t0.0408\t\t0.0000\t\tNA #> \t\tCell_total\t14000\t\t14000\t\t14000\t\t14000\t\t14000 #> \t\tCell_passed\t13826(98.76%)\t14000(100.00%)\t13778(98.41%)\t14000(100.00%)\t13605(97.18%) #> \t\tCell_failed\t174(1.24%)\t0(0.00%)\t222(1.59%)\t0(0.00%)\t395(2.82%)  ## 2. using the cutoffs manually specified pbmc14k_filtered_manual.eset <- filterSparseEset(pbmc14k_raw.eset, filter_mode = \"manual\", filter_type = \"both\",                                                  gene.nCell_min = 10,                                                  cell.nUMI_min = 500,                                                  cell.nUMI_max = 6500,                                                  cell.nFeature_min = 200,                                                  cell.nFeature_max = 2500,                                                  cell.pctMito_max = 0.1) #> Checking the availability of the 5 metrics ('nCell', 'nUMI', 'nFeature', 'pctMito', 'pctSpikeIn') used for filtration ... #> Checking passed! All 5 metrics are available. #> Filtration is done! #> Filtration Summary: #> \t12945/17986 genes passed! #> \t13974/14000 cells passed! #>  #> For more details: #> \tGene filtration statistics: #> \t\tMetrics\t\tnCell #> \t\tCutoff_Low\t10 #> \t\tCutoff_High\tInf #> \t\tGene_total\t17986 #> \t\tGene_passed\t12945(71.97%) #> \t\tGene_failed\t5041(28.03%) #>  #> \tCell filtration statistics: #> \t\tMetrics\t\tnUMI\t\tnFeature\tpctMito\t\tpctSpikeIn\tCombined #> \t\tCutoff_Low\t500\t\t200\t\t0\t\t0\t\tNA #> \t\tCutoff_High\t6500\t\t2500\t\t0.1000\t\t1.0000\t\tNA #> \t\tCell_total\t14000\t\t14000\t\t14000\t\t14000\t\t14000 #> \t\tCell_passed\t13985(99.89%)\t14000(100.00%)\t13989(99.92%)\t14000(100.00%)\t13974(99.81%) #> \t\tCell_failed\t15(0.11%)\t0(0.00%)\t11(0.08%)\t0(0.00%)\t26(0.19%)"},{"path":"https://jyyulab.github.io/scMINER/reference/generateMICAinput.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the standard input files for MICA from sparse eset object — generateMICAinput","title":"Generate the standard input files for MICA from sparse eset object — generateMICAinput","text":"function used generate standard input files MICA (Mutual Information-based Clustering Analysis) sparse eset object. supports two file formats, \".txt\" \".h5ad\". generate \".h5ad\" file, \"anndata\" package required.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generateMICAinput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the standard input files for MICA from sparse eset object — generateMICAinput","text":"","code":"generateMICAinput(   input_eset,   output_file,   overwrite = F,   downSample_N = NULL,   seed = 1 )"},{"path":"https://jyyulab.github.io/scMINER/reference/generateMICAinput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the standard input files for MICA from sparse eset object — generateMICAinput","text":"input_eset sparse eset object generate MICA input . must normalized log-transformed. output_file output file, MICA input file. either \".txt\" \".h5ad\" format. overwrite Logical, whether overwrite output_file already exists. Default: FALSE. downSample_N non-negative integer NULL, number cells downsample . Default: NULL. seed Integer NULL, seed sampling. Default: 1. Ignored downSample_N = NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generateMICAinput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the standard input files for MICA from sparse eset object — generateMICAinput","text":".txt .h5ad file can used MICA input","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generateMICAinput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the standard input files for MICA from sparse eset object — generateMICAinput","text":"","code":"if (FALSE) { # \\dontrun{ generateMICAinput(input_eset = pbmc14k_expression.eset,                   output_file = \"/work-path/PBMC14k/MICA/micaInput.txt\",                   overwrite = FALSE) } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/generatePortalInputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare the standard input files for scMINER Portal — generatePortalInputs","title":"Prepare the standard input files for scMINER Portal — generatePortalInputs","text":"function used generated standard input files can directly uploaded scMINER Portal visualization beyond.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generatePortalInputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare the standard input files for scMINER Portal — generatePortalInputs","text":"","code":"generatePortalInputs(   input_expression.eset = NULL,   input_expression.seuratObj = NULL,   group_by = NULL,   input_activity.eset = NULL,   input_network.dir = NULL,   input_network.table = NULL,   output_dir = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/generatePortalInputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare the standard input files for scMINER Portal — generatePortalInputs","text":"input_expression.eset eset object expression data filerted, normalized log-transformed. Default: NULL. input_expression.seuratObj Seurat object reduction results (umap /tsne). Default: NULL. group_by Character, name column phenoData eset object meta.data Seurat Obj defines groups colorcoding scMINER Portal. Default: NULL. input_activity.eset eset object activity data calculated scMINER. Default: NULL. input_network.dir Character, path SJARACNe directory. Default: NULL. input_network.table table network information, contains least three column: \"CellGroup\" (name groups), \"NetworkType\" (type network, TF SIG) \"NetworkFile\" (path network files). Default: NULL. output_dir Character, path output directory. Default: NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generatePortalInputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare the standard input files for scMINER Portal — generatePortalInputs","text":"function generated 1-3 standard files can uploaded scMINER Portal directly.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generatePortalInputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare the standard input files for scMINER Portal — generatePortalInputs","text":"","code":"if (FALSE) { # \\dontrun{ ## 1. the most commonly used command generatePortalInputs(input_expression.eset = pbmc14k_expression.eset,                      group_by = \"cellType\",                      input_activity.eset = activity_clustered.eset,                      input_network.dir = \"./SJARACNe\",                      output_dir = \"./scMINERportal\")  ## 2. prepare expression data from Seurat object (\"pbmc14.obj\") generatePortalInputs(input_expression.seuratObj = pbmc14.obj,                      output_dir = \"./path-to-output_dir\")  ## 3. prepare network data from a table network.table <- data.frame(CellGroup = c(\"CD4Treg\", \"CD4Treg\", \"B\", \"B\"),                             NetworkType = c(\"SIG\", \"TF\", \"SIG\", \"TF\"),                             NetworkFile = c(\"./sjaracne/CD4Treg/SIG/consensus_network_ncol_.txt\",                                             \"./sjaracne/CD4Treg/TF/consensus_network_ncol_.txt\",                                             \"./sjaracne/B/SIG/consensus_network_ncol_.txt\",                                             \"./sjaracne/B/TF/consensus_network_ncol_.txt\")) generatePortalInputs(input_expression.eset = pbmc14k_expression.eset,                      group_by = \"cellType\",                      input_network.table = network.table,                      output_dir = \"./path-to-output_dir\") } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/generateSJARACNeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the standard input files for SJARACNe from sparse eset object — generateSJARACNeInput","title":"Generate the standard input files for SJARACNe from sparse eset object — generateSJARACNeInput","text":"function used generate standard input files SJARACNe, scalable software tool gene network reverse engineering big data.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generateSJARACNeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the standard input files for SJARACNe from sparse eset object — generateSJARACNeInput","text":"","code":"generateSJARACNeInput(   input_eset,   group_name = \"clusterID\",   group_name.refine = FALSE,   sjaracne_dir,   species_type = \"hg\",   driver_type = \"TF_SIG\",   customDriver_TF = NULL,   customDriver_SIG = NULL,   downSample_N = 1000,   seed = 123,   superCell_N = NULL,   superCell_count = 100,   superCell_gamma = 10,   superCell_knn = 5,   superCell_nHVG = 1000,   superCell_nPC = 10,   superCell_save = TRUE,   print_command = FALSE,   save_command = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/generateSJARACNeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the standard input files for SJARACNe from sparse eset object — generateSJARACNeInput","text":"input_eset expression set object filtered, normalized log-transformed group_name Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". group_name.refine Logical, whether replace non-word characters group names underscore symbol (\"_\"). improper filename characters may cause troubles, since scMINER creates folder group using group names. Set argument TRUE can help avoid issue. Default: FALSE. sjaracne_dir path folder SJARACNe runs. inputs outputs saved . species_type Character, species pre-defined driver list use: \"hg\" human \"mm\" mouse. Default: hg. driver_type Character, type pre-defined driver list use: \"TF\" transcriptional factors , \"SIG\" signaling genes , \"TF_SIG\" . Default: \"TF_SIG\". customDriver_TF character vector NULL, genes used replace pre-defined transcriptional factor driver list. allows user customize TF driver list. Default: NULL. customDriver_SIG character vector NULL, genes used replace pre-defined signaling gene driver list. allows user customize SIG driver list. Default: NULL. downSample_N Integer NULL, integer given, groups cells integer -sampled integer. number 500 3000 gives good balance robustness computational efficiency. NULL, downsampling skipped. Default: 1000. seed Non-negative integer, seed random sampling. Default: 123. superCell_N Integer NULL, integer given, metacell method performed SuperCell package groups cells integer. NULL, metacell method done. Default: NULL. superCell_count Integer, number metacells generate SuperCell. Default: 100. Ignored superCell_N = NULL. superCell_gamma Integer, graining level data SuperCell (proportion number single cells initial dataset number metacells final dataset). Default: 10. Ignored superCell_N = NULL. superCell_knn Integer, k value compute single-cell kNN network SuperCell. Default: 5. Ignored superCell_N = NULL. superCell_nHVG Integer, number genes largest variation use SuperCell. Default: 1000. Ignored superCell_N = NULL. superCell_nPC Integer, number principal components use construction single-cell kNN network SuperCell.Default: 10. Ignored superCell_N = NULL. superCell_save Logical, whether save results generated SuperCell, including membership components. Default: TRUE. Ignored superCell_N = NULL. print_command Logical, whether print command run SJARACNe screen. Default: FALSE. save_command Logical, whether save command run SJARACNe. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generateSJARACNeInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the standard input files for SJARACNe from sparse eset object — generateSJARACNeInput","text":"function generate several folders files directory specified \"sjaracne_dir\": folder group column specified \"group_name\"; folder: \".exp.txt\" file: expression matrix, features cells. \"TF\" folder containing \".tf.txt\" file: file contains TF driver list. \"SIG\" folder containing \".sig.txt\" file: file contains SIG driver list. bash script (runSJARACNe.sh) run SJARACNe. modification needed run . json file (config_cwlexec.json) containing parameters run SJARACNe.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/generateSJARACNeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the standard input files for SJARACNe from sparse eset object — generateSJARACNeInput","text":"","code":"if (FALSE) { # \\dontrun{ data(pbmc14k_expression.eset) ## 1. The most commonly used command: pre-defined driver lists, automatic down-sampling, no metacell method generateSJARACNeInput(input_eset = pbmc14k_expression.eset,                       group_name = \"cell_type\",                       sjaracne_dir = \"./SJARACNe\",                       species_type = \"hg\",                       driver_type = \"TF_SIG\")  ## 2. to disable the downsampling generateSJARACNeInput(input_eset = pbmc14k_expression.eset,                       group_name = \"cell_type\",                       sjaracne_dir = \"./SJARACNe\",                       species_type = \"hg\",                       driver_type = \"TF_SIG\",                       downSample_N = NULL)  ## 3. Use the customized driver list: (add TUBB4A is the gene of interest but currently not in the pre-defined driver list)  # when the driver-to-add is known as a transcription factor generateSJARACNeInput(input_eset = pbmc14k_expression.eset, group_name = \"trueLabel\", sjaracne_dir = \"./SJARACNe\", species_type = \"hg\", driver_type = \"TF_SIG\",                       customDriver_TF = c(getDriverList(species_type = \"hg\", driver_type = \"TF\"), \"TUBB4A\"))  # when the driver-to-add is known as a non-transcription factor generateSJARACNeInput(input_eset = pbmc14k_expression.eset, group_name = \"trueLabel\", sjaracne_dir = \"./SJARACNe\", species_type = \"hg\", driver_type = \"TF_SIG\",                       customDriver_SIG = c(getDriverList(species_type = \"hg\", driver_type = \"SIG\"), \"TUBB4A\"))  # when it's ambiguous to tell if the driver-to-add is a transcriptional factor generateSJARACNeInput(input_eset = pbmc14k_expression.eset, group_name = \"trueLabel\", sjaracne_dir = \"./SJARACNe\", species_type = \"hg\", driver_type = \"TF_SIG\",                       customDriver_TF = c(getDriverList(species_type = \"hg\", driver_type = \"TF\"), \"TUBB4A\"),                       customDriver_SIG = c(getDriverList(species_type = \"hg\", driver_type = \"SIG\"), \"TUBB4A\"))  ## 4. Use the metacell method generateSJARACNeInput(input_eset = pbmc14k_expression.eset, group_name = \"trueLabel\", sjaracne_dir = \"./SJARACNe\", species_type = \"hg\", driver_type = \"TF_SIG\",                       superCell_N = 1000, superCell_count = 100, seed = 123) } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_inBatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate driver activities in batch from the SJARACNe directory — getActivity_inBatch","title":"Calculate driver activities in batch from the SJARACNe directory — getActivity_inBatch","text":"function used calculate driver activities multiple groups scMINER directory. calculate driver activities one single group, please use getActivity_individual().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_inBatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate driver activities in batch from the SJARACNe directory — getActivity_inBatch","text":"","code":"getActivity_inBatch(   input_eset,   sjaracne_dir,   group_name,   group_exclude = NULL,   network_tag.tf = NULL,   network_tag.sig = NULL,   driver_type = \"TF_SIG\",   activity_method = \"mean\",   do.z_normalization = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_inBatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate driver activities in batch from the SJARACNe directory — getActivity_inBatch","text":"input_eset expression set object filtered, normalized log-transformed sjaracne_dir path SJARACNe directory group_name Character, name column grouping, usually column cell types clusters group_exclude vector group names exclude activity calculation network_tag.tf Character NULL, tag used distinguish different SJARACNe runs input files. usually name folder(s) \"TF\" folder group. Default: NULL. network_tag.sig Character NULL, tag used distinguish different SJARACNe runs input files. usually name folder(s) \"SIG\" folder group. Default: NULL. driver_type Character, type pre-defined driver list use. one : \"TF\" transcriptional factors , \"SIG\" signaling genes , \"TF_SIG\" . Default: \"TF_SIG\". activity_method Character, method used calculate activity: \"mean\" (default), \"weightedmean\", \"absmean\" \"maxmean\". .z_normalization Logical, whether z-normalization gene expression values sample. Set FALSE expression values scaled cell. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_inBatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate driver activities in batch from the SJARACNe directory — getActivity_inBatch","text":"expression set object. assayData activity matrix cells groups, drivers cells. phenoData featureData exactly save input eset.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_inBatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate driver activities in batch from the SJARACNe directory — getActivity_inBatch","text":"","code":"data(pbmc14k_expression.eset)  ## 1. when no tag was used in running SJARACNE: the network file folder (\"sjaracne_workflow-*\") is directly under TF/SIG folder of each group. activity.eset <- getActivity_inBatch(input_eset = pbmc14k_expression.eset,                                      sjaracne_dir = system.file(\"extdata/demo_pbmc14k/SJARACNe\", package = \"scMINER\"),                                      group_name = \"trueLabel\",                                      driver_type = \"TF_SIG\",                                      activity_method = \"mean\",                                      do.z_normalization = TRUE) #> 7 groups were found in trueLabel ... #> Checking network files for each group ... #> \tGroup 1 / 7 : B ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 2 / 7 : CD4TCM ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 3 / 7 : CD4TN ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 4 / 7 : CD4Treg ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 5 / 7 : CD8TN ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 6 / 7 : Monocyte ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 7 / 7 : NK ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> Calculating activity for each group ... #> \tGroup 1 / 7 : B ... #> \tActivity calculation is completed successfully! #> \tGroup 2 / 7 : CD4TCM ... #> \tActivity calculation is completed successfully! #> \tGroup 3 / 7 : CD4TN ... #> \tActivity calculation is completed successfully! #> \tGroup 4 / 7 : CD4Treg ... #> \tActivity calculation is completed successfully! #> \tGroup 5 / 7 : CD8TN ... #> \tActivity calculation is completed successfully! #> \tGroup 6 / 7 : Monocyte ... #> \tActivity calculation is completed successfully! #> \tGroup 7 / 7 : NK ... #> \tActivity calculation is completed successfully! #> NAs were found in the activity matrix and have been replaced by the minimum value:  -0.3879122 .  ## 2. when tag (e.g. \"bt100_pc001\" ) was used: the network file folder (\"sjaracne_workflow-*\") is directly under a subfolder \"bs_100\" of the TF/SIG folder of each group. activity.eset <- getActivity_inBatch(input_eset = pbmc14k_expression.eset,                                      sjaracne_dir = system.file(\"extdata/demo_pbmc14k/SJARACNe\", package = \"scMINER\"),                                      group_name = \"trueLabel\",                                      network_tag.tf = \"bt100_pc001\",                                      network_tag.sig = \"bt100_pc001\",                                      driver_type = \"TF_SIG\",                                      activity_method = \"mean\",                                      do.z_normalization = TRUE) #> 7 groups were found in trueLabel ... #> Checking network files for each group ... #> \tGroup 1 / 7 : B ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 2 / 7 : CD4TCM ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 3 / 7 : CD4TN ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 4 / 7 : CD4Treg ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 5 / 7 : CD8TN ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 6 / 7 : Monocyte ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 7 / 7 : NK ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> Calculating activity for each group ... #> \tGroup 1 / 7 : B ... #> \tActivity calculation is completed successfully! #> \tGroup 2 / 7 : CD4TCM ... #> \tActivity calculation is completed successfully! #> \tGroup 3 / 7 : CD4TN ... #> \tActivity calculation is completed successfully! #> \tGroup 4 / 7 : CD4Treg ... #> \tActivity calculation is completed successfully! #> \tGroup 5 / 7 : CD8TN ... #> \tActivity calculation is completed successfully! #> \tGroup 6 / 7 : Monocyte ... #> \tActivity calculation is completed successfully! #> \tGroup 7 / 7 : NK ... #> \tActivity calculation is completed successfully! #> NAs were found in the activity matrix and have been replaced by the minimum value:  -0.3879122 .  ## 3. to calculate the activities of TF only activity.eset <- getActivity_inBatch(input_eset = pbmc14k_expression.eset,                                      sjaracne_dir = system.file(\"extdata/demo_pbmc14k/SJARACNe\", package = \"scMINER\"),                                      group_name = \"trueLabel\",                                      network_tag.tf = \"bt100_pc001\",                                      network_tag.sig = \"bt100_pc001\",                                      driver_type = \"TF\",                                      activity_method = \"mean\",                                      do.z_normalization = TRUE) #> 7 groups were found in trueLabel ... #> Checking network files for each group ... #> \tGroup 1 / 7 : B ... #> \t\tTF network check passed! #> \tGroup 2 / 7 : CD4TCM ... #> \t\tTF network check passed! #> \tGroup 3 / 7 : CD4TN ... #> \t\tTF network check passed! #> \tGroup 4 / 7 : CD4Treg ... #> \t\tTF network check passed! #> \tGroup 5 / 7 : CD8TN ... #> \t\tTF network check passed! #> \tGroup 6 / 7 : Monocyte ... #> \t\tTF network check passed! #> \tGroup 7 / 7 : NK ... #> \t\tTF network check passed! #> Calculating activity for each group ... #> \tGroup 1 / 7 : B ... #> \tActivity calculation is completed successfully! #> \tGroup 2 / 7 : CD4TCM ... #> \tActivity calculation is completed successfully! #> \tGroup 3 / 7 : CD4TN ... #> \tActivity calculation is completed successfully! #> \tGroup 4 / 7 : CD4Treg ... #> \tActivity calculation is completed successfully! #> \tGroup 5 / 7 : CD8TN ... #> \tActivity calculation is completed successfully! #> \tGroup 6 / 7 : Monocyte ... #> \tActivity calculation is completed successfully! #> \tGroup 7 / 7 : NK ... #> \tActivity calculation is completed successfully! #> NAs were found in the activity matrix and have been replaced by the minimum value:  -0.3425395 .  ## 4. to exclude some groups in the activity calculation (e.g. \"NK\" and \"Monocyte\") activity.eset <- getActivity_inBatch(input_eset = pbmc14k_expression.eset,                                      sjaracne_dir = system.file(\"extdata/demo_pbmc14k/SJARACNe\", package = \"scMINER\"),                                      group_name = \"trueLabel\",                                      group_exclude = c(\"NK\", \"Monocyte\"),                                      network_tag.tf = \"bt100_pc001\",                                      network_tag.sig = \"bt100_pc001\",                                      driver_type = \"TF\",                                      activity_method = \"mean\",                                      do.z_normalization = TRUE) #> 7 groups were found in trueLabel ... #> 5 groups left after excluding the groups specified by group_exclude: B, CD4TCM, CD4TN, CD4Treg, CD8TN ... #> Checking network files for each group ... #> \tGroup 1 / 5 : B ... #> \t\tTF network check passed! #> \tGroup 2 / 5 : CD4TCM ... #> \t\tTF network check passed! #> \tGroup 3 / 5 : CD4TN ... #> \t\tTF network check passed! #> \tGroup 4 / 5 : CD4Treg ... #> \t\tTF network check passed! #> \tGroup 5 / 5 : CD8TN ... #> \t\tTF network check passed! #> Calculating activity for each group ... #> \tGroup 1 / 5 : B ... #> \tActivity calculation is completed successfully! #> \tGroup 2 / 5 : CD4TCM ... #> \tActivity calculation is completed successfully! #> \tGroup 3 / 5 : CD4TN ... #> \tActivity calculation is completed successfully! #> \tGroup 4 / 5 : CD4Treg ... #> \tActivity calculation is completed successfully! #> \tGroup 5 / 5 : CD8TN ... #> \tActivity calculation is completed successfully! #> NAs were found in the activity matrix and have been replaced by the minimum value:  -0.3425395 .  ## 5. when calculate the activities from the gene expression values scaled by other methods (e.g. ScaleData() from Seurat package) activity.eset <- getActivity_inBatch(input_eset = pbmc14k_expression.eset,                                      sjaracne_dir = system.file(\"extdata/demo_pbmc14k/SJARACNe\", package = \"scMINER\"),                                      group_name = \"trueLabel\",                                      network_tag.tf = \"bt100_pc001\",                                      network_tag.sig = \"bt100_pc001\",                                      driver_type = \"TF_SIG\",                                      activity_method = \"mean\",                                      do.z_normalization = FALSE) #> 7 groups were found in trueLabel ... #> Checking network files for each group ... #> \tGroup 1 / 7 : B ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 2 / 7 : CD4TCM ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 3 / 7 : CD4TN ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 4 / 7 : CD4Treg ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 5 / 7 : CD8TN ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 6 / 7 : Monocyte ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> \tGroup 7 / 7 : NK ... #> \t\tTF network check passed! #> \t\tSIG network check passed! #> Calculating activity for each group ... #> \tGroup 1 / 7 : B ... #> \tActivity calculation is completed successfully! #> \tGroup 2 / 7 : CD4TCM ... #> \tActivity calculation is completed successfully! #> \tGroup 3 / 7 : CD4TN ... #> \tActivity calculation is completed successfully! #> \tGroup 4 / 7 : CD4Treg ... #> \tActivity calculation is completed successfully! #> \tGroup 5 / 7 : CD8TN ... #> \tActivity calculation is completed successfully! #> \tGroup 6 / 7 : Monocyte ... #> \tActivity calculation is completed successfully! #> \tGroup 7 / 7 : NK ... #> \tActivity calculation is completed successfully! #> NAs were found in the activity matrix and have been replaced by the minimum value:  0 ."},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_individual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate driver activities per group from network files — getActivity_individual","title":"Calculate driver activities per group from network files — getActivity_individual","text":"function used calculate driver activities one single group sparse eset obj networks generated SJARACNe. calculate driver activities multiple groups scMINER directory, please use getActivity_inBatch().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate driver activities per group from network files — getActivity_individual","text":"","code":"getActivity_individual(   input_eset,   network_file.tf = NULL,   network_file.sig = NULL,   driver_type = \"TF_SIG\",   activity_method = \"mean\",   do.z_normalization = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate driver activities per group from network files — getActivity_individual","text":"input_eset group-specific expression set object filtered, normalized log-transformed network_file.tf path TF network file generated SJARACNe network_file.sig path SIG network file generated SJARACNe driver_type Character, type pre-defined driver list use: \"TF\" transcriptional factors , \"SIG\" signaling genes , \"TF_SIG\" . Default: \"TF_SIG\". activity_method Character, method used calculate activity: \"mean\" (default), \"weightedmean\", \"absmean\" \"maxmean\". .z_normalization Logical, whether z-normalization gene expression values sample. Set FALSE expression values scaled cell. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate driver activities per group from network files — getActivity_individual","text":"expression set object group--interest. assayData activity matrix cells groups, drivers cells. phenoData featureData exactly save input eset.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getActivity_individual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate driver activities per group from network files — getActivity_individual","text":"","code":"data(pbmc14k_expression.eset) activity_group.eset <- getActivity_individual(input_eset = pbmc14k_expression.eset[, pbmc14k_expression.eset$trueLabel == \"B\"],                                               network_file.tf = system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                                               network_file.sig = system.file(\"extdata/demo_pbmc14k/SJARACNe/B/SIG/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                                               driver_type = \"TF_SIG\")"},{"path":"https://jyyulab.github.io/scMINER/reference/getDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential activity analysis on expression set — getDA","title":"Perform differential activity analysis on expression set — getDA","text":"Perform differential activity analysis expression set","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential activity analysis on expression set — getDA","text":"","code":"getDA(   input_eset,   group_by = \"clusterID\",   g1 = NULL,   g0 = NULL,   use_method = \"t.test\" )"},{"path":"https://jyyulab.github.io/scMINER/reference/getDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential activity analysis on expression set — getDA","text":"input_eset expression set object filtered, normalized log-transformed group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". g1 vector character defining fore-ground group NULL. Default: NULL. g0 vector character defining back-ground group NULL. Default: NULL. use_method Character, method used differential analysis: \"limma\", \"wilcoxon\", \"t.test\" (default).","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential activity analysis on expression set — getDA","text":"data frame. Rows genes/drivers, columns 11 statistics differential analysis.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential activity analysis on expression set — getDA","text":"","code":"if (FALSE) { # \\dontrun{ ## 1. To perform differential activity analysis in a 1-vs-rest manner for all groups in \"clusterID\" column da_res <- getDA(input_eset = activity_clustered.eset,                 group_by = \"clusterID\",                 use_method = \"t.test\")  ## 2. To perform differential activity analysis in a 1-vs-rest manner for one specific group in \"clusterID\" column da_res <- getDA(input_eset = activity_clustered.eset,                 group_by = \"clusterID\",                 g1 = c(\"1\"),                 use_method = \"t.test\")  ## 3. To perform differential activity analysis in a rest-vs-1 manner for one specific group in \"clusterID\" column da_res <- getDA(input_eset = activity_clustered.eset,                 group_by = \"clusterID\",                 g0 = c(\"1\"),                 use_method = \"t.test\")  ## 4. To perform differential activity analysis in a 1-vs-1 manner for groups in \"clusterID\" column da_res <- getDA(input_eset = activity_clustered.eset,                 group_by = \"clusterID\",                 g1 = c(\"1\"),                 g0 = c(\"3\"),                 use_method = \"t.test\") } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/getDE.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform differential expression analysis on expression set object — getDE","title":"Perform differential expression analysis on expression set object — getDE","text":"function used perform differential expression analysis sparse eset object. supports methods: \"limma\", \"wilcoxon\", \"t.test\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform differential expression analysis on expression set object — getDE","text":"","code":"getDE(   input_eset,   group_by = \"clusterID\",   g1 = NULL,   g0 = NULL,   use_method = \"limmma\" )"},{"path":"https://jyyulab.github.io/scMINER/reference/getDE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform differential expression analysis on expression set object — getDE","text":"input_eset expression set object filtered, normalized log-transformed group_by Character, name column grouping, usually column cell types clusters. Default: \"clusterID\". g1 vector character defining fore-ground group NULL. Default: NULL. g0 vector character defining back-ground group NULL. Default: NULL. use_method Character, method used differential analysis: \"limma\" (default), \"wilcoxon\", \"t.test\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform differential expression analysis on expression set object — getDE","text":"data frame. Rows genes/drivers, columns 11 statistics differential analysis.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform differential expression analysis on expression set object — getDE","text":"","code":"data(pbmc14k_expression.eset)  ## 1. To perform differential expression analysis in a 1-vs-rest manner for all groups in \"clusterID\" column de_res <- getDE(input_eset = pbmc14k_expression.eset,                 group_by = \"clusterID\",                 use_method = \"limma\") #> 7 groups were found in group_by column [ clusterID ]. #> Since no group was specified, the differential analysis will be conducted among all groups in the group_by column [ clusterID ] in the 1-vs-rest manner. #> \t 1 / 7 : group 1 ( 1 ) vs the rest... #> \t 634 cells were found for g1. #> \t 2866 cells were found for g0. #> \t 2 / 7 : group 1 ( 2 ) vs the rest... #> \t 514 cells were found for g1. #> \t 2986 cells were found for g0. #> \t 3 / 7 : group 1 ( 3 ) vs the rest... #> \t 508 cells were found for g1. #> \t 2992 cells were found for g0. #> \t 4 / 7 : group 1 ( 4 ) vs the rest... #> \t 492 cells were found for g1. #> \t 3008 cells were found for g0. #> \t 5 / 7 : group 1 ( 5 ) vs the rest... #> \t 501 cells were found for g1. #> \t 2999 cells were found for g0. #> \t 6 / 7 : group 1 ( 6 ) vs the rest... #> \t 486 cells were found for g1. #> \t 3014 cells were found for g0. #> \t 7 / 7 : group 1 ( 7 ) vs the rest... #> \t 365 cells were found for g1. #> \t 3135 cells were found for g0.  ## 2. To perform differential expression analysis in a 1-vs-rest manner for one specific group in \"clusterID\" column de_res <- getDE(input_eset = pbmc14k_expression.eset,                 group_by = \"clusterID\",                 g1 = c(\"1\"),                 use_method = \"limma\") #> 7 groups were found in group_by column [ clusterID ]. #> Since g1 was specified but g0 was not, all the other cells except those of g1 will be defined as g0. #> \t 1 / 1 : group 1 ( 1 ) vs group 0 ( 2, 3, 4, 5, 6, 7 ) ... #> \t 634 cells were found for g1. #> \t 2866 cells were found for g0.  ## 3. To perform differential expression analysis in a rest-vs-1 manner for one specific group in \"clusterID\" column de_res <- getDE(input_eset = pbmc14k_expression.eset,                 group_by = \"clusterID\",                 g0 = c(\"1\"),                 use_method = \"limma\") #> 7 groups were found in group_by column [ clusterID ]. #> Since g0 was specified but g1 was not, all the other cells except those of g0 will be defined as g1. #> \t 1 / 1 : group 1 ( 2, 3, 4, 5, 6, 7 ) vs group 0 ( 1 ) ... #> \t 2866 cells were found for g1. #> \t 634 cells were found for g0.  ## 4. To perform differential expression analysis in a 1-vs-1 manner for groups in \"clusterID\" column de_res <- getDE(input_eset = pbmc14k_expression.eset,                 group_by = \"clusterID\",                 g1 = c(\"1\"),                 g0 = c(\"3\"),                 use_method = \"limma\") #> 7 groups were found in group_by column [ clusterID ]. #> \t 1 / 1 : group 1 ( 1 ) vs group 0 ( 3 ) ... #> \t 634 cells were found for g1. #> \t 508 cells were found for g0. #> Warning: Zero sample variances detected, have been offset away from zero"},{"path":"https://jyyulab.github.io/scMINER/reference/getDriverList.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the pre-defined driver lists of human or mouse — getDriverList","title":"Extract the pre-defined driver lists of human or mouse — getDriverList","text":"function used extract pre-defined driver lists human mouse.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDriverList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the pre-defined driver lists of human or mouse — getDriverList","text":"","code":"getDriverList(species_type = \"hg\", driver_type = \"TF\")"},{"path":"https://jyyulab.github.io/scMINER/reference/getDriverList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the pre-defined driver lists of human or mouse — getDriverList","text":"species_type Character, species driver lists extracted: \"hg\" human, \"mm\" mouse. Default: \"hg\". driver_type Character, type drivers extracted: \"TF\" transcriptional factor, \"SIG\" signaling genes, \"TF_SIG\" . Default: \"TF\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDriverList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the pre-defined driver lists of human or mouse — getDriverList","text":"vector pre-defined driver genes","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getDriverList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the pre-defined driver lists of human or mouse — getDriverList","text":"","code":"## 1. Get the TF driver list of human hg_tf <- getDriverList(species_type = \"hg\", driver_type = \"TF\")  ## 2. Get the total driver list, including both TF and SIG, of mouse mm_driver <- getDriverList(species_type = \"mm\", driver_type = \"TF_SIG\")"},{"path":"https://jyyulab.github.io/scMINER/reference/getTopFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick the top genes/drivers for each group from differential analysis results — getTopFeatures","title":"Pick the top genes/drivers for each group from differential analysis results — getTopFeatures","text":"function used pick top genes/drivers group differential analysis results based either fold change, p value FDR.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getTopFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick the top genes/drivers for each group from differential analysis results — getTopFeatures","text":"","code":"getTopFeatures(   input_table,   number = 10,   group_by = \"g1_tag\",   sort_by = \"log2FC\",   sort_decreasing = TRUE )"},{"path":"https://jyyulab.github.io/scMINER/reference/getTopFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick the top genes/drivers for each group from differential analysis results — getTopFeatures","text":"input_table table generated getDE() getDA(), containing 11 statistics differential analysis. number Integer, number top genes/driver pick group. Default: 10. group_by Character, name column grouping, usually column cell types clusters. Default: \"g1_tag\". sort_by Character, name column sorting. Default: \"log2FC\". sort_decreasing Logical, whether sort column specified sort_by decreasing order. FALSE, column sorted increasing order. Default: TRUE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getTopFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick the top genes/drivers for each group from differential analysis results — getTopFeatures","text":"data frame top genes/driver group","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/getTopFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick the top genes/drivers for each group from differential analysis results — getTopFeatures","text":"","code":"if (FALSE) { # \\dontrun{ top_drivers <- getTopFeature(da_res, number = 10, group_by, \"g1_tag\") } # }"},{"path":"https://jyyulab.github.io/scMINER/reference/get_net2target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a txt network file to a list — get_net2target_list","title":"Convert a txt network file to a list — get_net2target_list","text":"function used convert data frame generated SJARACNe network file (read.delim() others) list names source genes values data frame target information source gene. Iinternal function cal_Activity(), getActivity_individual(), getActivity_inBatch().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/get_net2target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a txt network file to a list — get_net2target_list","text":"","code":"get_net2target_list(net_dat = NULL)"},{"path":"https://jyyulab.github.io/scMINER/reference/get_net2target_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a txt network file to a list — get_net2target_list","text":"net_dat data frame generated SJARANCe network file. columns needed: \"source\", \"target\", \"MI\" \"spearman\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/get_net2target_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a txt network file to a list — get_net2target_list","text":"list source genes, source gene, value data frame \"target\", \"MI\" \"spearman\" columns","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/get_net2target_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a txt network file to a list — get_net2target_list","text":"","code":"net_data <-  read.table(system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                         header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE, quote = \"\",                         colClasses = c(\"character\", \"character\", \"character\", \"character\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\")) target_list <- get_net2target_list(net_data)"},{"path":"https://jyyulab.github.io/scMINER/reference/get_target_list2matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ther list generated by get_net2target_list() to a matrix of signed mutual information — get_target_list2matrix","title":"Convert ther list generated by get_net2target_list() to a matrix of signed mutual information — get_target_list2matrix","text":"function used conver list generated get_net2target_list() matrix mutual information signed Spearman correlation coefficient, sources targets. internal function cal_Activity(), getActivity_individual(), getActivity_inBatch().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/get_target_list2matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ther list generated by get_net2target_list() to a matrix of signed mutual information — get_target_list2matrix","text":"","code":"get_target_list2matrix(target_list = NULL, activity_method = \"mean\")"},{"path":"https://jyyulab.github.io/scMINER/reference/get_target_list2matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ther list generated by get_net2target_list() to a matrix of signed mutual information — get_target_list2matrix","text":"target_list list source genes returned get_net2target_list(), source gene, value data frame \"target\", \"MI\" \"spearman\" columns, activity_method Character, method used calculate activity: \"mean\" (default), \"weightedmean\", \"absmean\" \"maxmean\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/get_target_list2matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert ther list generated by get_net2target_list() to a matrix of signed mutual information — get_target_list2matrix","text":"\"weightedmean\" given, returns matrix signed (Spearman correlation coefficient) mutual information, sign used activity calculation. methods (\"mean\", \"absmean\" \"maxmean\"), returns matrix 1.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/get_target_list2matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert ther list generated by get_net2target_list() to a matrix of signed mutual information — get_target_list2matrix","text":"","code":"net_data <-  read.table(system.file(\"extdata/demo_pbmc14k/SJARACNe/B/TF/bt100_pc001/consensus_network_ncol_.txt\", package = \"scMINER\"),                         header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE, quote = \"\",                         colClasses = c(\"character\", \"character\", \"character\", \"character\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\")) target_list <- get_net2target_list(net_data)  weight_matrix <- get_target_list2matrix(target_list)"},{"path":"https://jyyulab.github.io/scMINER/reference/normalizeSparseEset.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize and log-transform the sparse eset object — normalizeSparseEset","title":"Normalize and log-transform the sparse eset object — normalizeSparseEset","text":"function used normalize log-transform sparse eset object. default method \"log21p\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/normalizeSparseEset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize and log-transform the sparse eset object — normalizeSparseEset","text":"","code":"normalizeSparseEset(   input_eset,   scale_factor = 1e+06,   do.logTransform = TRUE,   log_base = 2,   log_pseudoCount = 1 )"},{"path":"https://jyyulab.github.io/scMINER/reference/normalizeSparseEset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize and log-transform the sparse eset object — normalizeSparseEset","text":"input_eset sparse eset object normalization scale_factor Numeric, library size normalize . Default: 1000000. .logTransform Logical, whether log-transformation. Default: TRUE. log_base Numeric, base log-transformation. Usually 2, exp(1) 10. Default: 2. log_pseudoCount Numeric, pseudo count add avoid \"-Inf\" log-transformation. Default: 1.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/normalizeSparseEset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize and log-transform the sparse eset object — normalizeSparseEset","text":"sparse eset object normalized log-transformed","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/normalizeSparseEset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize and log-transform the sparse eset object — normalizeSparseEset","text":"","code":"data(\"pbmc14k_rawCount\") pbmc14k_raw.eset <- createSparseEset(input_matrix = pbmc14k_rawCount, projectID = \"PBMC14k\", addMetaData = TRUE) #> Creating sparse eset from the input_matrix ... #> \tAdding meta data based on input_matrix ... #> Done! The sparse eset has been generated: 17986 genes, 14000 cells. pbmc14k_filtered.eset <- filterSparseEset(pbmc14k_raw.eset, filter_mode = \"auto\", filter_type = \"both\") #> Checking the availability of the 5 metrics ('nCell', 'nUMI', 'nFeature', 'pctMito', 'pctSpikeIn') used for filtration ... #> Checking passed! All 5 metrics are available. #> Filtration is done! #> Filtration Summary: #> \t8846/17986 genes passed! #> \t13605/14000 cells passed! #>  #> For more details: #> \tGene filtration statistics: #> \t\tMetrics\t\tnCell #> \t\tCutoff_Low\t70 #> \t\tCutoff_High\tInf #> \t\tGene_total\t17986 #> \t\tGene_passed\t8846(49.18%) #> \t\tGene_failed\t9140(50.82%) #>  #> \tCell filtration statistics: #> \t\tMetrics\t\tnUMI\t\tnFeature\tpctMito\t\tpctSpikeIn\tCombined #> \t\tCutoff_Low\t458\t\t221\t\t0\t\t0\t\tNA #> \t\tCutoff_High\t3694\t\tInf\t\t0.0408\t\t0.0000\t\tNA #> \t\tCell_total\t14000\t\t14000\t\t14000\t\t14000\t\t14000 #> \t\tCell_passed\t13826(98.76%)\t14000(100.00%)\t13778(98.41%)\t14000(100.00%)\t13605(97.18%) #> \t\tCell_failed\t174(1.24%)\t0(0.00%)\t222(1.59%)\t0(0.00%)\t395(2.82%)  pbmc14k_log2cpm.eset <- normalizeSparseEset(pbmc14k_filtered.eset,                                             scale_factor = 1000000,                                             log_base = 2,                                             log_pseudoCount = 1) #> Done! The data matrix of eset has been normalized and log-transformed! #> The returned eset contains: 8846 genes, 13605 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_expression.eset.html","id":null,"dir":"Reference","previous_headings":"","what":"SparseEset object of PBMC14k dataset — pbmc14k_expression.eset","title":"SparseEset object of PBMC14k dataset — pbmc14k_expression.eset","text":"dataset contains SparseEset object PBMC14k dataset. demonstration purposes, downsampled 3.5k cells, 500 cells per population.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_expression.eset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SparseEset object of PBMC14k dataset — pbmc14k_expression.eset","text":"","code":"pbmc14k_expression.eset"},{"path":[]},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_expression.eset.html","id":"pbmc-k-expression-eset","dir":"Reference","previous_headings":"","what":"pbmc14k_expression.eset","title":"SparseEset object of PBMC14k dataset — pbmc14k_expression.eset","text":"large dgCMatrix 17,986 rows 14,000 columns:","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_expression.eset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SparseEset object of PBMC14k dataset — pbmc14k_expression.eset","text":"generated scMINER Filtered_DownSampled_SortedPBMC_data.csv https://zenodo.org/record/3357167#.YhQNF2RKj6V","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_rawCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw count matrix of PBMC14k dataset — pbmc14k_rawCount","title":"Raw count matrix of PBMC14k dataset — pbmc14k_rawCount","text":"dataset contains raw UMI counts 14,000 Peripheral Blood Mononuclear Cells (PBMCs) 7 known cell types, 2,000 cell .","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_rawCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw count matrix of PBMC14k dataset — pbmc14k_rawCount","text":"","code":"pbmc14k_rawCount"},{"path":[]},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_rawCount.html","id":"pbmc-k-rawcount","dir":"Reference","previous_headings":"","what":"pbmc14k_rawCount","title":"Raw count matrix of PBMC14k dataset — pbmc14k_rawCount","text":"large dgCMatrix 17,986 rows 14,000 columns: CACTTTGACGCAAT UMI counts genes cell \"CACTTTGACGCAAT\" GTTACGGAAACGAA UMI counts genes cell \"GTTACGGAAACGAA\" AGTCACGACAGGAG UMI counts genes cell \"AGTCACGACAGGAG\"","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/pbmc14k_rawCount.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Raw count matrix of PBMC14k dataset — pbmc14k_rawCount","text":"subset Filtered_DownSampled_SortedPBMC_data.csv https://zenodo.org/record/3357167#.YhQNF2RKj6V","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the input data generated by 10x Genomics from a directory — readInput_10x.dir","title":"Read the input data generated by 10x Genomics from a directory — readInput_10x.dir","text":"function used read gene expression data directory containing three files generated 10x Genomics: matrix.mtx, barcodes.tsv features.tsv (genes.tsv). function can handle conditions well: Alternative file names feature data: features.tsv CellRanger > 3.0, genes.tsv CellRanger < 3.0; One input files compressed, usually \".gz\" format; Data multiple modalities: like single cell multiome data. case, retains data \"Gene Expression\".","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the input data generated by 10x Genomics from a directory — readInput_10x.dir","text":"","code":"readInput_10x.dir(   input_dir,   featureType = \"gene_symbol\",   removeSuffix = TRUE,   addPrefix = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the input data generated by 10x Genomics from a directory — readInput_10x.dir","text":"input_dir Path directory containing 3 files generated 10x Genomics: matrix.mtx, barcodes.tsv features.tsv (genes.tsv) featureType Character, feature type use gene name expression matrix: \"gene_symbol\" (default) \"gene_id\". removeSuffix Logical, whether remove suffix \"-1\" present cell barcodes. Default: TRUE. addPrefix Character NULL, add prefix cell barcodes, like Sample ID. highly recommended use prefix containing letters /numbers , starting numbers. Default: NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the input data generated by 10x Genomics from a directory — readInput_10x.dir","text":"sparse gene expression matrix raw UMI counts, genes cells","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the input data generated by 10x Genomics from a directory — readInput_10x.dir","text":"","code":"input_dir <- system.file(\"extdata/demo_inputs/cell_matrix_10x\", package = \"scMINER\") # path to input data list.files(input_dir, full.names = FALSE) # you should see three files: matrix.mtx, barcodes.tsv and features.tsv (or genes.tsv) #> [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\"   sparseMatrix <- readInput_10x.dir(input_dir,                                   featureType = \"gene_symbol\",                                   removeSuffix = TRUE,                                   addPrefix = \"demoSample\") #> Reading 10x Genomcis data from: /home/runner/work/_temp/Library/scMINER/extdata/demo_inputs/cell_matrix_10x ... #> \tMultiple data modalities were found: Gene Expression, Peaks . Only the gene expression data (under \"Gene Expression\") was kept. #> Done! The sparse gene expression matrix has been generated: 500 genes, 100 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.h5.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the input data generated by 10x Genomics from the HDF5 file — readInput_10x.h5","title":"Read the input data generated by 10x Genomics from the HDF5 file — readInput_10x.h5","text":"function used read gene expression data HDF5 file generated CellRanger pipeline 10x Genomics. function can automatically distinguish data different modalities (e.g. expression data, ATAC data) retains gene expression data . **hdf5r** package needed use function.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.h5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the input data generated by 10x Genomics from the HDF5 file — readInput_10x.h5","text":"","code":"readInput_10x.h5(   h5_file,   featureType = \"gene_symbol\",   removeSuffix = TRUE,   addPrefix = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.h5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the input data generated by 10x Genomics from the HDF5 file — readInput_10x.h5","text":"h5_file H5 file generated CellRanger pipeline 10x Genomics featureType Character, feature type use gene name expression matrix: \"gene_symbol\" (default) \"gene_id\". removeSuffix Logical, whether remove suffix \"-1\" present cell barcodes. Default: TRUE. addPrefix Character NULL, add prefix cell barcodes, like Sample ID. highly recommended use prefix containing letters /numbers , starting numbers. Default: NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.h5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the input data generated by 10x Genomics from the HDF5 file — readInput_10x.h5","text":"sparse gene expression matrix raw UMI counts, genes cells","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_10x.h5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the input data generated by 10x Genomics from the HDF5 file — readInput_10x.h5","text":"","code":"h5_file <- system.file(\"extdata/demo_inputs/hdf5_10x/demoData3.h5\", package = \"scMINER\") # path to hdf5 file sparseMatrix <- readInput_10x.h5(h5_file,                                  featureType = \"gene_symbol\",                                  removeSuffix = TRUE,                                  addPrefix = \"demoSample\") #> Reading 10x Genomics data from: /home/runner/work/_temp/Library/scMINER/extdata/demo_inputs/hdf5_10x/demoData3.h5 ... #> \tChecking HDF5 file format ... #> \tFormat check passed! #> Done! The sparse gene expression matrix has been generated: 36601 genes, 182 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the h5ad file — readInput_h5ad","title":"Read the h5ad file — readInput_h5ad","text":"function used read h5ad file, popular file format storing sharing single-cell RNA sequencing data. **anndata** package needed use function.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the h5ad file — readInput_h5ad","text":"","code":"readInput_h5ad(h5ad_file, removeSuffix = FALSE, addPrefix = NULL)"},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the h5ad file — readInput_h5ad","text":"h5ad_file H5ad file sc/snRNA-seq data removeSuffix Logical, whether remove suffix \"-1\" present cell barcodes. Default: TRUE. addPrefix Character NULL, add prefix cell barcodes, like Sample ID. highly recommended use prefix containing letters /numbers , starting numbers. Default: NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_h5ad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the h5ad file — readInput_h5ad","text":"AnnData object containing \"X\" (observations x variables data matrix), \"obs\" (data frame observations), \"var\" (data frame variables) . details, please check https://anndata.readthedocs.io/en/latest/generated/anndata.AnnData.html.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the h5ad file — readInput_h5ad","text":"","code":"h5ad_file <- system.file(\"extdata/demo_inputs/h5ad_file/demoData4.h5ad\", package = \"scMINER\") # path to h5ad file sparseMatrix <- readInput_h5ad(h5ad_file,                                removeSuffix = FALSE,                                addPrefix = \"demoSample\") #> Reading h5ad file: /home/runner/work/_temp/Library/scMINER/extdata/demo_inputs/h5ad_file/demoData4.h5ad ... #> Done! The sparse gene expression matrix has been generated: 1000 genes, 100 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the table format file — readInput_table","title":"Read the table format file — readInput_table","text":"function used read data table-format file. user needs specify format table using parameter .geneBYcell: TRUE (default): rows treated genes, columns treated cells; FALSE: rows treated cells, columns treated genes.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the table format file — readInput_table","text":"","code":"readInput_table(   table_file,   sep = \"\\t\",   is.geneBYcell = TRUE,   removeSuffix = FALSE,   addPrefix = NULL )"},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the table format file — readInput_table","text":"table_file table format file (e.g. txt, tsv, csv, others) data read . sep String, field separator character. Default: \"\\t\". .geneBYcell Logical, whether table organized gene (row) cell (column) format. FALSE, rows treated cells. Default: TRUE. removeSuffix Logical, whether remove suffix \"-1\" present cell barcodes. Default: FALSE. addPrefix Character NULL, add prefix cell barcodes, like Sample ID. highly recommended use prefix containing letters /numbers , starting numbers. Default: NULL.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the table format file — readInput_table","text":"sparse gene expression matrix, genes cells","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/readInput_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the table format file — readInput_table","text":"","code":"table_file <- system.file(\"extdata/demo_inputs/table_file/demoData2.txt.gz\", package = \"scMINER\") # path to text-table file sparseMatrix <- readInput_table(table_file,                                 sep = \"\\t\",                                 is.geneBYcell = TRUE,                                 removeSuffix = FALSE,                                 addPrefix = \"demoSample\") #> Reading table file: /home/runner/work/_temp/Library/scMINER/extdata/demo_inputs/table_file/demoData2.txt.gz ... #> Done! The sparse gene expression matrix has been generated: 1000 genes, 100 cells."},{"path":"https://jyyulab.github.io/scMINER/reference/updateSparseEset.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the slots and/or meta data of the sparse eset object — updateSparseEset","title":"Update the slots and/or meta data of the sparse eset object — updateSparseEset","text":"function used update three slots ('assayData', 'phenoData', 'featureData') /'meta data' sparse eset object.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/updateSparseEset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the slots and/or meta data of the sparse eset object — updateSparseEset","text":"","code":"updateSparseEset(   input_eset,   dataMatrix = NULL,   cellData = NULL,   featureData = NULL,   addMetaData = FALSE )"},{"path":"https://jyyulab.github.io/scMINER/reference/updateSparseEset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the slots and/or meta data of the sparse eset object — updateSparseEset","text":"input_eset sparse eset object update dataMatrix data matrix Features/Genes rows Cells columns. row.names colnames must consistent input_eset. Default: NULL. cellData data frame containing meta data cells NULL. row.names consistent colnames input_eset. Default: NULL. featureData data frame containing meata data features NULL. row.names consistent row.names input_eset. Default: NULL. addMetaData Logical, whether update meta data features cells based expression matrix. Default: FALSE.","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/updateSparseEset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the slots and/or meta data of the sparse eset object — updateSparseEset","text":"sparse eset object updated information","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/updateSparseEset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the slots and/or meta data of the sparse eset object — updateSparseEset","text":"","code":"data(\"pbmc14k_expression.eset\")  ## 1. Update the QC metrics: this will recalculate the 'nUMI', 'nFeature', 'pctMito', 'pctSpikeIn' and 'nCell'. This is very helpful when the SparseEset is subsetted or combined. pbmc14k_raw.eset <- updateSparseEset(input_eset = pbmc14k_expression.eset, addMetaData = TRUE) #> Updating meta data based on data matrix ... #> Warning: The data matrix might not be a raw count matrix, since non-integer values were found. The 'nUMI' column is only valid when the values in data matrix are raw UMI counts.  ## 2. Update the meta data of cells: with this, the user can add more information of cells, like clustering results, cell type. true_label <- read.table(system.file(\"extdata/demo_pbmc14k/PBMC14k_trueLabel.txt.gz\", package = \"scMINER\"), header = TRUE, row.names = 1, sep = \"\\t\", quote = \"\", stringsAsFactors = FALSE) pbmc14k_raw.eset <- updateSparseEset(input_eset = pbmc14k_expression.eset, cellData = true_label, addMetaData = TRUE) #> The cell information of input_eset has been updated! #> Updating meta data based on data matrix ... #> Warning: The data matrix might not be a raw count matrix, since non-integer values were found. The 'nUMI' column is only valid when the values in data matrix are raw UMI counts."},{"path":"https://jyyulab.github.io/scMINER/reference/z_normalization.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a numeric vector using Z-normalization — z_normalization","title":"Scale a numeric vector using Z-normalization — z_normalization","text":"function used scale numeric vector using Z-normalization. NA ignored. internal function cal_Activity(), getActivity_individual(), getActivity_inBatch().","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/z_normalization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a numeric vector using Z-normalization — z_normalization","text":"","code":"z_normalization(x)"},{"path":"https://jyyulab.github.io/scMINER/reference/z_normalization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a numeric vector using Z-normalization — z_normalization","text":"x vector numbers z-normalization","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/z_normalization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a numeric vector using Z-normalization — z_normalization","text":"vector numbers z-normalized","code":""},{"path":"https://jyyulab.github.io/scMINER/reference/z_normalization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a numeric vector using Z-normalization — z_normalization","text":"","code":"z_normalization(c(1,2,3,4,5,NA,6,7,8,9)) #> [1] -1.4605935 -1.0954451 -0.7302967 -0.3651484  0.0000000  0.3651484  0.7302967 #> [8]  1.0954451  1.4605935"}]
